// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app.proto

#ifndef PROTOBUF_app_2eproto__INCLUDED
#define PROTOBUF_app_2eproto__INCLUDED
#pragma warning(disable:4244)
#pragma warning(disable:4267)
#pragma warning(disable:4081)
#pragma warning(disable:4996)
#pragma warning(disable:4005)
#pragma warning(disable:4018)
#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_app_2eproto();
void protobuf_AssignDesc_app_2eproto();
void protobuf_ShutdownFile_app_2eproto();

class Request;
class Result;
class ResultGroup;

enum Result_ResultType {
  Result_ResultType_CLS = 0,
  Result_ResultType_REG = 1
};
bool Result_ResultType_IsValid(int value);
const Result_ResultType Result_ResultType_ResultType_MIN = Result_ResultType_CLS;
const Result_ResultType Result_ResultType_ResultType_MAX = Result_ResultType_REG;
const int Result_ResultType_ResultType_ARRAYSIZE = Result_ResultType_ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Result_ResultType_descriptor();
inline const ::std::string& Result_ResultType_Name(Result_ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Result_ResultType_descriptor(), value);
}
inline bool Result_ResultType_Parse(
    const ::std::string& name, Result_ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Result_ResultType>(
    Result_ResultType_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string task_name = 1;
  inline bool has_task_name() const;
  inline void clear_task_name();
  static const int kTaskNameFieldNumber = 1;
  inline const ::std::string& task_name() const;
  inline void set_task_name(const ::std::string& value);
  inline void set_task_name(const char* value);
  inline void set_task_name(const char* value, size_t size);
  inline ::std::string* mutable_task_name();
  inline ::std::string* release_task_name();
  inline void set_allocated_task_name(::std::string* task_name);

  // repeated string files = 2;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 2;
  inline const ::std::string& files(int index) const;
  inline ::std::string* mutable_files(int index);
  inline void set_files(int index, const ::std::string& value);
  inline void set_files(int index, const char* value);
  inline void set_files(int index, const char* value, size_t size);
  inline ::std::string* add_files();
  inline void add_files(const ::std::string& value);
  inline void add_files(const char* value);
  inline void add_files(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& files() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_files();

  // @@protoc_insertion_point(class_scope:Request)
 private:
  inline void set_has_task_name();
  inline void clear_has_task_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* task_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> files_;
  friend void  protobuf_AddDesc_app_2eproto();
  friend void protobuf_AssignDesc_app_2eproto();
  friend void protobuf_ShutdownFile_app_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Result_ResultType ResultType;
  static const ResultType CLS = Result_ResultType_CLS;
  static const ResultType REG = Result_ResultType_REG;
  static inline bool ResultType_IsValid(int value) {
    return Result_ResultType_IsValid(value);
  }
  static const ResultType ResultType_MIN =
    Result_ResultType_ResultType_MIN;
  static const ResultType ResultType_MAX =
    Result_ResultType_ResultType_MAX;
  static const int ResultType_ARRAYSIZE =
    Result_ResultType_ResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultType_descriptor() {
    return Result_ResultType_descriptor();
  }
  static inline const ::std::string& ResultType_Name(ResultType value) {
    return Result_ResultType_Name(value);
  }
  static inline bool ResultType_Parse(const ::std::string& name,
      ResultType* value) {
    return Result_ResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string task_name = 1;
  inline bool has_task_name() const;
  inline void clear_task_name();
  static const int kTaskNameFieldNumber = 1;
  inline const ::std::string& task_name() const;
  inline void set_task_name(const ::std::string& value);
  inline void set_task_name(const char* value);
  inline void set_task_name(const char* value, size_t size);
  inline ::std::string* mutable_task_name();
  inline ::std::string* release_task_name();
  inline void set_allocated_task_name(::std::string* task_name);

  // optional .Result.ResultType type = 2 [default = CLS];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Result_ResultType type() const;
  inline void set_type(::Result_ResultType value);

  // optional uint32 num = 3 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // repeated float float_data = 4;
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 4;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int_data = 5;
  inline int int_data_size() const;
  inline void clear_int_data();
  static const int kIntDataFieldNumber = 5;
  inline ::google::protobuf::int32 int_data(int index) const;
  inline void set_int_data(int index, ::google::protobuf::int32 value);
  inline void add_int_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_data();

  // @@protoc_insertion_point(class_scope:Result)
 private:
  inline void set_has_task_name();
  inline void clear_has_task_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* task_name_;
  int type_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::RepeatedField< float > float_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_data_;
  friend void  protobuf_AddDesc_app_2eproto();
  friend void protobuf_AssignDesc_app_2eproto();
  friend void protobuf_ShutdownFile_app_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// -------------------------------------------------------------------

class ResultGroup : public ::google::protobuf::Message {
 public:
  ResultGroup();
  virtual ~ResultGroup();

  ResultGroup(const ResultGroup& from);

  inline ResultGroup& operator=(const ResultGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultGroup& default_instance();

  void Swap(ResultGroup* other);

  // implements Message ----------------------------------------------

  ResultGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultGroup& from);
  void MergeFrom(const ResultGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Result results = 1;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 1;
  inline const ::Result& results(int index) const;
  inline ::Result* mutable_results(int index);
  inline ::Result* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::Result >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::Result >*
      mutable_results();

  // optional uint32 num = 2 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ResultGroup)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Result > results_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_app_2eproto();
  friend void protobuf_AssignDesc_app_2eproto();
  friend void protobuf_ShutdownFile_app_2eproto();

  void InitAsDefaultInstance();
  static ResultGroup* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// optional string task_name = 1;
inline bool Request::has_task_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_task_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_task_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_task_name() {
  if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_->clear();
  }
  clear_has_task_name();
}
inline const ::std::string& Request::task_name() const {
  // @@protoc_insertion_point(field_get:Request.task_name)
  return *task_name_;
}
inline void Request::set_task_name(const ::std::string& value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
  // @@protoc_insertion_point(field_set:Request.task_name)
}
inline void Request::set_task_name(const char* value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Request.task_name)
}
inline void Request::set_task_name(const char* value, size_t size) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Request.task_name)
}
inline ::std::string* Request::mutable_task_name() {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Request.task_name)
  return task_name_;
}
inline ::std::string* Request::release_task_name() {
  clear_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_name_;
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_task_name(::std::string* task_name) {
  if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_name_;
  }
  if (task_name) {
    set_has_task_name();
    task_name_ = task_name;
  } else {
    clear_has_task_name();
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Request.task_name)
}

// repeated string files = 2;
inline int Request::files_size() const {
  return files_.size();
}
inline void Request::clear_files() {
  files_.Clear();
}
inline const ::std::string& Request::files(int index) const {
  // @@protoc_insertion_point(field_get:Request.files)
  return files_.Get(index);
}
inline ::std::string* Request::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:Request.files)
  return files_.Mutable(index);
}
inline void Request::set_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Request.files)
  files_.Mutable(index)->assign(value);
}
inline void Request::set_files(int index, const char* value) {
  files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Request.files)
}
inline void Request::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Request.files)
}
inline ::std::string* Request::add_files() {
  return files_.Add();
}
inline void Request::add_files(const ::std::string& value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Request.files)
}
inline void Request::add_files(const char* value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Request.files)
}
inline void Request::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Request.files)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::files() const {
  // @@protoc_insertion_point(field_list:Request.files)
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:Request.files)
  return &files_;
}

// -------------------------------------------------------------------

// Result

// optional string task_name = 1;
inline bool Result::has_task_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_task_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_task_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_task_name() {
  if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_->clear();
  }
  clear_has_task_name();
}
inline const ::std::string& Result::task_name() const {
  // @@protoc_insertion_point(field_get:Result.task_name)
  return *task_name_;
}
inline void Result::set_task_name(const ::std::string& value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
  // @@protoc_insertion_point(field_set:Result.task_name)
}
inline void Result::set_task_name(const char* value) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Result.task_name)
}
inline void Result::set_task_name(const char* value, size_t size) {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  task_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Result.task_name)
}
inline ::std::string* Result::mutable_task_name() {
  set_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Result.task_name)
  return task_name_;
}
inline ::std::string* Result::release_task_name() {
  clear_has_task_name();
  if (task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_name_;
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Result::set_allocated_task_name(::std::string* task_name) {
  if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_name_;
  }
  if (task_name) {
    set_has_task_name();
    task_name_ = task_name;
  } else {
    clear_has_task_name();
    task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Result.task_name)
}

// optional .Result.ResultType type = 2 [default = CLS];
inline bool Result::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Result_ResultType Result::type() const {
  // @@protoc_insertion_point(field_get:Result.type)
  return static_cast< ::Result_ResultType >(type_);
}
inline void Result::set_type(::Result_ResultType value) {
  assert(::Result_ResultType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Result.type)
}

// optional uint32 num = 3 [default = 0];
inline bool Result::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 Result::num() const {
  // @@protoc_insertion_point(field_get:Result.num)
  return num_;
}
inline void Result::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Result.num)
}

// repeated float float_data = 4;
inline int Result::float_data_size() const {
  return float_data_.size();
}
inline void Result::clear_float_data() {
  float_data_.Clear();
}
inline float Result::float_data(int index) const {
  // @@protoc_insertion_point(field_get:Result.float_data)
  return float_data_.Get(index);
}
inline void Result::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Result.float_data)
}
inline void Result::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:Result.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Result::float_data() const {
  // @@protoc_insertion_point(field_list:Result.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Result::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:Result.float_data)
  return &float_data_;
}

// repeated int32 int_data = 5;
inline int Result::int_data_size() const {
  return int_data_.size();
}
inline void Result::clear_int_data() {
  int_data_.Clear();
}
inline ::google::protobuf::int32 Result::int_data(int index) const {
  // @@protoc_insertion_point(field_get:Result.int_data)
  return int_data_.Get(index);
}
inline void Result::set_int_data(int index, ::google::protobuf::int32 value) {
  int_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Result.int_data)
}
inline void Result::add_int_data(::google::protobuf::int32 value) {
  int_data_.Add(value);
  // @@protoc_insertion_point(field_add:Result.int_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Result::int_data() const {
  // @@protoc_insertion_point(field_list:Result.int_data)
  return int_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Result::mutable_int_data() {
  // @@protoc_insertion_point(field_mutable_list:Result.int_data)
  return &int_data_;
}

// -------------------------------------------------------------------

// ResultGroup

// repeated .Result results = 1;
inline int ResultGroup::results_size() const {
  return results_.size();
}
inline void ResultGroup::clear_results() {
  results_.Clear();
}
inline const ::Result& ResultGroup::results(int index) const {
  // @@protoc_insertion_point(field_get:ResultGroup.results)
  return results_.Get(index);
}
inline ::Result* ResultGroup::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:ResultGroup.results)
  return results_.Mutable(index);
}
inline ::Result* ResultGroup::add_results() {
  // @@protoc_insertion_point(field_add:ResultGroup.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Result >&
ResultGroup::results() const {
  // @@protoc_insertion_point(field_list:ResultGroup.results)
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::Result >*
ResultGroup::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:ResultGroup.results)
  return &results_;
}

// optional uint32 num = 2 [default = 0];
inline bool ResultGroup::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResultGroup::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResultGroup::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResultGroup::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 ResultGroup::num() const {
  // @@protoc_insertion_point(field_get:ResultGroup.num)
  return num_;
}
inline void ResultGroup::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ResultGroup.num)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Result_ResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Result_ResultType>() {
  return ::Result_ResultType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_app_2eproto__INCLUDED
