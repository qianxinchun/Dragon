// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dragon.proto

#ifndef PROTOBUF_dragon_2eproto__INCLUDED
#define PROTOBUF_dragon_2eproto__INCLUDED
#pragma warning(disable:4244)
#pragma warning(disable:4267)
#pragma warning(disable:4081)
#pragma warning(disable:4996)
#pragma warning(disable:4005)
#pragma warning(disable:4018)
#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dragon_2eproto();
void protobuf_AssignDesc_dragon_2eproto();
void protobuf_ShutdownFile_dragon_2eproto();

class Datum;
class SolverParameter;
class SolverState;
class FillerParameter;
class NetState;
class NetStateRule;
class NetParameter;
class BlobShape;
class BlobProto;
class ParamSpec;
class DataParameter;
class TransformationParameter;
class LayerParameter;
class ConvolutionParameter;
class PoolingParameter;
class InnerProductParameter;
class SoftmaxParameter;
class LossParameter;
class AccuracyParameter;
class ReLUParameter;
class BatchNormParameter;
class DropoutParameter;
class LSTMParameter;
class PythonParameter;
class ROIPoolingParameter;
class SmoothL1LossParameter;
class ReshapeParameter;
class LRNParameter;
class PowerParameter;
class EltwiseParameter;
class ImageFilesParameter;
class CropParameter;

enum SolverParameter_SnapShotFormat {
  SolverParameter_SnapShotFormat_HDF5 = 0,
  SolverParameter_SnapShotFormat_BINARY = 1
};
bool SolverParameter_SnapShotFormat_IsValid(int value);
const SolverParameter_SnapShotFormat SolverParameter_SnapShotFormat_SnapShotFormat_MIN = SolverParameter_SnapShotFormat_HDF5;
const SolverParameter_SnapShotFormat SolverParameter_SnapShotFormat_SnapShotFormat_MAX = SolverParameter_SnapShotFormat_BINARY;
const int SolverParameter_SnapShotFormat_SnapShotFormat_ARRAYSIZE = SolverParameter_SnapShotFormat_SnapShotFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapShotFormat_descriptor();
inline const ::std::string& SolverParameter_SnapShotFormat_Name(SolverParameter_SnapShotFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SnapShotFormat_descriptor(), value);
}
inline bool SolverParameter_SnapShotFormat_Parse(
    const ::std::string& name, SolverParameter_SnapShotFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SnapShotFormat>(
    SolverParameter_SnapShotFormat_descriptor(), name, value);
}
enum SolverParameter_SolverMode {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
const int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor();
inline const ::std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), value);
}
inline bool SolverParameter_SolverMode_Parse(
    const ::std::string& name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5
};
bool SolverParameter_SolverType_IsValid(int value);
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAM;
const int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor();
inline const ::std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), value);
}
inline bool SolverParameter_SolverType_Parse(
    const ::std::string& name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVG = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVG;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT_MODE = 0,
  ParamSpec_DimCheckMode_PERMISSIVE_MODE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT_MODE;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE_MODE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_DRAGON = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_Method {
  PoolingParameter_Method_MAX = 0,
  PoolingParameter_Method_AVG = 1,
  PoolingParameter_Method_STOCHASTIC = 2
};
bool PoolingParameter_Method_IsValid(int value);
const PoolingParameter_Method PoolingParameter_Method_Method_MIN = PoolingParameter_Method_MAX;
const PoolingParameter_Method PoolingParameter_Method_Method_MAX = PoolingParameter_Method_STOCHASTIC;
const int PoolingParameter_Method_Method_ARRAYSIZE = PoolingParameter_Method_Method_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Method_descriptor();
inline const ::std::string& PoolingParameter_Method_Name(PoolingParameter_Method value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Method_descriptor(), value);
}
inline bool PoolingParameter_Method_Parse(
    const ::std::string& name, PoolingParameter_Method* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Method>(
    PoolingParameter_Method_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_DRAGON = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_DRAGON = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_DRAGON = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
const LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
const LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
const int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor();
inline const ::std::string& LRNParameter_Engine_Name(LRNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), value);
}
inline bool LRNParameter_Engine_Parse(
    const ::std::string& name, LRNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class Datum : public ::google::protobuf::Message {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  Datum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 label = 4;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 4;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // repeated float float_data = 6 [packed = true];
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bool encoded = 7 [default = false];
  inline bool has_encoded() const;
  inline void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  inline bool encoded() const;
  inline void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:Datum)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_encoded();
  inline void clear_has_encoded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  ::std::string* data_;
  ::google::protobuf::RepeatedField< float > float_data_;
  mutable int _float_data_cached_byte_size_;
  bool encoded_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static Datum* default_instance_;
};
// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  void Swap(SolverParameter* other);

  // implements Message ----------------------------------------------

  SolverParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverParameter_SnapShotFormat SnapShotFormat;
  static const SnapShotFormat HDF5 = SolverParameter_SnapShotFormat_HDF5;
  static const SnapShotFormat BINARY = SolverParameter_SnapShotFormat_BINARY;
  static inline bool SnapShotFormat_IsValid(int value) {
    return SolverParameter_SnapShotFormat_IsValid(value);
  }
  static const SnapShotFormat SnapShotFormat_MIN =
    SolverParameter_SnapShotFormat_SnapShotFormat_MIN;
  static const SnapShotFormat SnapShotFormat_MAX =
    SolverParameter_SnapShotFormat_SnapShotFormat_MAX;
  static const int SnapShotFormat_ARRAYSIZE =
    SolverParameter_SnapShotFormat_SnapShotFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SnapShotFormat_descriptor() {
    return SolverParameter_SnapShotFormat_descriptor();
  }
  static inline const ::std::string& SnapShotFormat_Name(SnapShotFormat value) {
    return SolverParameter_SnapShotFormat_Name(value);
  }
  static inline bool SnapShotFormat_Parse(const ::std::string& name,
      SnapShotFormat* value) {
    return SolverParameter_SnapShotFormat_Parse(name, value);
  }

  typedef SolverParameter_SolverMode SolverMode;
  static const SolverMode CPU = SolverParameter_SolverMode_CPU;
  static const SolverMode GPU = SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static const SolverType SGD = SolverParameter_SolverType_SGD;
  static const SolverType NESTEROV = SolverParameter_SolverType_NESTEROV;
  static const SolverType ADAGRAD = SolverParameter_SolverType_ADAGRAD;
  static const SolverType RMSPROP = SolverParameter_SolverType_RMSPROP;
  static const SolverType ADADELTA = SolverParameter_SolverType_ADADELTA;
  static const SolverType ADAM = SolverParameter_SolverType_ADAM;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string net_file = 24;
  inline bool has_net_file() const;
  inline void clear_net_file();
  static const int kNetFileFieldNumber = 24;
  inline const ::std::string& net_file() const;
  inline void set_net_file(const ::std::string& value);
  inline void set_net_file(const char* value);
  inline void set_net_file(const char* value, size_t size);
  inline ::std::string* mutable_net_file();
  inline ::std::string* release_net_file();
  inline void set_allocated_net_file(::std::string* net_file);

  // optional .NetParameter net_param = 25;
  inline bool has_net_param() const;
  inline void clear_net_param();
  static const int kNetParamFieldNumber = 25;
  inline const ::NetParameter& net_param() const;
  inline ::NetParameter* mutable_net_param();
  inline ::NetParameter* release_net_param();
  inline void set_allocated_net_param(::NetParameter* net_param);

  // optional string train_net_file = 1;
  inline bool has_train_net_file() const;
  inline void clear_train_net_file();
  static const int kTrainNetFileFieldNumber = 1;
  inline const ::std::string& train_net_file() const;
  inline void set_train_net_file(const ::std::string& value);
  inline void set_train_net_file(const char* value);
  inline void set_train_net_file(const char* value, size_t size);
  inline ::std::string* mutable_train_net_file();
  inline ::std::string* release_train_net_file();
  inline void set_allocated_train_net_file(::std::string* train_net_file);

  // repeated string test_net_file = 2;
  inline int test_net_file_size() const;
  inline void clear_test_net_file();
  static const int kTestNetFileFieldNumber = 2;
  inline const ::std::string& test_net_file(int index) const;
  inline ::std::string* mutable_test_net_file(int index);
  inline void set_test_net_file(int index, const ::std::string& value);
  inline void set_test_net_file(int index, const char* value);
  inline void set_test_net_file(int index, const char* value, size_t size);
  inline ::std::string* add_test_net_file();
  inline void add_test_net_file(const ::std::string& value);
  inline void add_test_net_file(const char* value);
  inline void add_test_net_file(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net_file();

  // optional .NetParameter train_net_param = 21;
  inline bool has_train_net_param() const;
  inline void clear_train_net_param();
  static const int kTrainNetParamFieldNumber = 21;
  inline const ::NetParameter& train_net_param() const;
  inline ::NetParameter* mutable_train_net_param();
  inline ::NetParameter* release_train_net_param();
  inline void set_allocated_train_net_param(::NetParameter* train_net_param);

  // repeated .NetParameter test_net_param = 22;
  inline int test_net_param_size() const;
  inline void clear_test_net_param();
  static const int kTestNetParamFieldNumber = 22;
  inline const ::NetParameter& test_net_param(int index) const;
  inline ::NetParameter* mutable_test_net_param(int index);
  inline ::NetParameter* add_test_net_param();
  inline const ::google::protobuf::RepeatedPtrField< ::NetParameter >&
      test_net_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetParameter >*
      mutable_test_net_param();

  // optional .NetState train_state = 26;
  inline bool has_train_state() const;
  inline void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  inline const ::NetState& train_state() const;
  inline ::NetState* mutable_train_state();
  inline ::NetState* release_train_state();
  inline void set_allocated_train_state(::NetState* train_state);

  // repeated .NetState test_state = 27;
  inline int test_state_size() const;
  inline void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  inline const ::NetState& test_state(int index) const;
  inline ::NetState* mutable_test_state(int index);
  inline ::NetState* add_test_state();
  inline const ::google::protobuf::RepeatedPtrField< ::NetState >&
      test_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetState >*
      mutable_test_state();

  // repeated int32 test_iter = 3;
  inline int test_iter_size() const;
  inline void clear_test_iter();
  static const int kTestIterFieldNumber = 3;
  inline ::google::protobuf::int32 test_iter(int index) const;
  inline void set_test_iter(int index, ::google::protobuf::int32 value);
  inline void add_test_iter(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // optional int32 test_interval = 4 [default = 0];
  inline bool has_test_interval() const;
  inline void clear_test_interval();
  static const int kTestIntervalFieldNumber = 4;
  inline ::google::protobuf::int32 test_interval() const;
  inline void set_test_interval(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 19 [default = false];
  inline bool has_test_compute_loss() const;
  inline void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 19;
  inline bool test_compute_loss() const;
  inline void set_test_compute_loss(bool value);

  // optional bool test_before_train = 32 [default = true];
  inline bool has_test_before_train() const;
  inline void clear_test_before_train();
  static const int kTestBeforeTrainFieldNumber = 32;
  inline bool test_before_train() const;
  inline void set_test_before_train(bool value);

  // optional float base_lr = 5;
  inline bool has_base_lr() const;
  inline void clear_base_lr();
  static const int kBaseLrFieldNumber = 5;
  inline float base_lr() const;
  inline void set_base_lr(float value);

  // optional int32 display = 6;
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 6;
  inline ::google::protobuf::int32 display() const;
  inline void set_display(::google::protobuf::int32 value);

  // optional int32 average_loss = 33 [default = 1];
  inline bool has_average_loss() const;
  inline void clear_average_loss();
  static const int kAverageLossFieldNumber = 33;
  inline ::google::protobuf::int32 average_loss() const;
  inline void set_average_loss(::google::protobuf::int32 value);

  // optional int32 max_iter = 7;
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 7;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional int32 iter_size = 36 [default = 1];
  inline bool has_iter_size() const;
  inline void clear_iter_size();
  static const int kIterSizeFieldNumber = 36;
  inline ::google::protobuf::int32 iter_size() const;
  inline void set_iter_size(::google::protobuf::int32 value);

  // optional string lr_policy = 8;
  inline bool has_lr_policy() const;
  inline void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 8;
  inline const ::std::string& lr_policy() const;
  inline void set_lr_policy(const ::std::string& value);
  inline void set_lr_policy(const char* value);
  inline void set_lr_policy(const char* value, size_t size);
  inline ::std::string* mutable_lr_policy();
  inline ::std::string* release_lr_policy();
  inline void set_allocated_lr_policy(::std::string* lr_policy);

  // optional float gamma = 9;
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 9;
  inline float gamma() const;
  inline void set_gamma(float value);

  // optional float power = 10;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 10;
  inline float power() const;
  inline void set_power(float value);

  // optional float momentum = 11;
  inline bool has_momentum() const;
  inline void clear_momentum();
  static const int kMomentumFieldNumber = 11;
  inline float momentum() const;
  inline void set_momentum(float value);

  // optional float weight_decay = 12;
  inline bool has_weight_decay() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 12;
  inline float weight_decay() const;
  inline void set_weight_decay(float value);

  // optional string regularizer = 29 [default = "L2"];
  inline bool has_regularizer() const;
  inline void clear_regularizer();
  static const int kRegularizerFieldNumber = 29;
  inline const ::std::string& regularizer() const;
  inline void set_regularizer(const ::std::string& value);
  inline void set_regularizer(const char* value);
  inline void set_regularizer(const char* value, size_t size);
  inline ::std::string* mutable_regularizer();
  inline ::std::string* release_regularizer();
  inline void set_allocated_regularizer(::std::string* regularizer);

  // optional int32 step_size = 13;
  inline bool has_step_size() const;
  inline void clear_step_size();
  static const int kStepSizeFieldNumber = 13;
  inline ::google::protobuf::int32 step_size() const;
  inline void set_step_size(::google::protobuf::int32 value);

  // repeated int32 step_value = 34;
  inline int step_value_size() const;
  inline void clear_step_value();
  static const int kStepValueFieldNumber = 34;
  inline ::google::protobuf::int32 step_value(int index) const;
  inline void set_step_value(int index, ::google::protobuf::int32 value);
  inline void add_step_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      step_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_step_value();

  // optional float clip_gradients = 35 [default = -1];
  inline bool has_clip_gradients() const;
  inline void clear_clip_gradients();
  static const int kClipGradientsFieldNumber = 35;
  inline float clip_gradients() const;
  inline void set_clip_gradients(float value);

  // optional int32 snapshot_interval = 14 [default = 0];
  inline bool has_snapshot_interval() const;
  inline void clear_snapshot_interval();
  static const int kSnapshotIntervalFieldNumber = 14;
  inline ::google::protobuf::int32 snapshot_interval() const;
  inline void set_snapshot_interval(::google::protobuf::int32 value);

  // optional bool snapshot_after_train = 28 [default = true];
  inline bool has_snapshot_after_train() const;
  inline void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 28;
  inline bool snapshot_after_train() const;
  inline void set_snapshot_after_train(bool value);

  // optional string snapshot_prefix = 15;
  inline bool has_snapshot_prefix() const;
  inline void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 15;
  inline const ::std::string& snapshot_prefix() const;
  inline void set_snapshot_prefix(const ::std::string& value);
  inline void set_snapshot_prefix(const char* value);
  inline void set_snapshot_prefix(const char* value, size_t size);
  inline ::std::string* mutable_snapshot_prefix();
  inline ::std::string* release_snapshot_prefix();
  inline void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional bool snapshot_diff = 16;
  inline bool has_snapshot_diff() const;
  inline void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 16;
  inline bool snapshot_diff() const;
  inline void set_snapshot_diff(bool value);

  // optional .SolverParameter.SnapShotFormat snapshot_format = 37 [default = BINARY];
  inline bool has_snapshot_format() const;
  inline void clear_snapshot_format();
  static const int kSnapshotFormatFieldNumber = 37;
  inline ::SolverParameter_SnapShotFormat snapshot_format() const;
  inline void set_snapshot_format(::SolverParameter_SnapShotFormat value);

  // optional .SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  inline bool has_solver_mode() const;
  inline void clear_solver_mode();
  static const int kSolverModeFieldNumber = 17;
  inline ::SolverParameter_SolverMode solver_mode() const;
  inline void set_solver_mode(::SolverParameter_SolverMode value);

  // optional int32 device_id = 18 [default = 0];
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 18;
  inline ::google::protobuf::int32 device_id() const;
  inline void set_device_id(::google::protobuf::int32 value);

  // optional int64 random_seed = 20 [default = -1];
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 20;
  inline ::google::protobuf::int64 random_seed() const;
  inline void set_random_seed(::google::protobuf::int64 value);

  // optional string type = 40 [default = "SGD"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 40;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float delta = 31 [default = 1e-010];
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 31;
  inline float delta() const;
  inline void set_delta(float value);

  // optional float momentum2 = 39 [default = 0.999];
  inline bool has_momentum2() const;
  inline void clear_momentum2();
  static const int kMomentum2FieldNumber = 39;
  inline float momentum2() const;
  inline void set_momentum2(float value);

  // optional float rms_decay = 38;
  inline bool has_rms_decay() const;
  inline void clear_rms_decay();
  static const int kRmsDecayFieldNumber = 38;
  inline float rms_decay() const;
  inline void set_rms_decay(float value);

  // optional bool debug_info = 23 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 23;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // optional .SolverParameter.SolverType solver_type = 30 [default = SGD];
  inline bool has_solver_type() const;
  inline void clear_solver_type();
  static const int kSolverTypeFieldNumber = 30;
  inline ::SolverParameter_SolverType solver_type() const;
  inline void set_solver_type(::SolverParameter_SolverType value);

  // @@protoc_insertion_point(class_scope:SolverParameter)
 private:
  inline void set_has_net_file();
  inline void clear_has_net_file();
  inline void set_has_net_param();
  inline void clear_has_net_param();
  inline void set_has_train_net_file();
  inline void clear_has_train_net_file();
  inline void set_has_train_net_param();
  inline void clear_has_train_net_param();
  inline void set_has_train_state();
  inline void clear_has_train_state();
  inline void set_has_test_interval();
  inline void clear_has_test_interval();
  inline void set_has_test_compute_loss();
  inline void clear_has_test_compute_loss();
  inline void set_has_test_before_train();
  inline void clear_has_test_before_train();
  inline void set_has_base_lr();
  inline void clear_has_base_lr();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_average_loss();
  inline void clear_has_average_loss();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_iter_size();
  inline void clear_has_iter_size();
  inline void set_has_lr_policy();
  inline void clear_has_lr_policy();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_regularizer();
  inline void clear_has_regularizer();
  inline void set_has_step_size();
  inline void clear_has_step_size();
  inline void set_has_clip_gradients();
  inline void clear_has_clip_gradients();
  inline void set_has_snapshot_interval();
  inline void clear_has_snapshot_interval();
  inline void set_has_snapshot_after_train();
  inline void clear_has_snapshot_after_train();
  inline void set_has_snapshot_prefix();
  inline void clear_has_snapshot_prefix();
  inline void set_has_snapshot_diff();
  inline void clear_has_snapshot_diff();
  inline void set_has_snapshot_format();
  inline void clear_has_snapshot_format();
  inline void set_has_solver_mode();
  inline void clear_has_solver_mode();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_momentum2();
  inline void clear_has_momentum2();
  inline void set_has_rms_decay();
  inline void clear_has_rms_decay();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_solver_type();
  inline void clear_has_solver_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* net_file_;
  ::NetParameter* net_param_;
  ::std::string* train_net_file_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_file_;
  ::NetParameter* train_net_param_;
  ::google::protobuf::RepeatedPtrField< ::NetParameter > test_net_param_;
  ::NetState* train_state_;
  ::google::protobuf::RepeatedPtrField< ::NetState > test_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  ::google::protobuf::int32 test_interval_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 average_loss_;
  ::google::protobuf::int32 max_iter_;
  ::google::protobuf::int32 iter_size_;
  ::std::string* lr_policy_;
  float gamma_;
  float power_;
  bool test_compute_loss_;
  bool test_before_train_;
  bool snapshot_after_train_;
  bool snapshot_diff_;
  float momentum_;
  static ::std::string* _default_regularizer_;
  ::std::string* regularizer_;
  float weight_decay_;
  ::google::protobuf::int32 step_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > step_value_;
  float clip_gradients_;
  ::google::protobuf::int32 snapshot_interval_;
  ::std::string* snapshot_prefix_;
  int snapshot_format_;
  int solver_mode_;
  ::google::protobuf::int64 random_seed_;
  ::google::protobuf::int32 device_id_;
  float delta_;
  static ::std::string* _default_type_;
  ::std::string* type_;
  float momentum2_;
  float rms_decay_;
  bool debug_info_;
  int solver_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static SolverParameter* default_instance_;
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  SolverState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iter = 1;
  inline bool has_iter() const;
  inline void clear_iter();
  static const int kIterFieldNumber = 1;
  inline ::google::protobuf::int32 iter() const;
  inline void set_iter(::google::protobuf::int32 value);

  // optional string learned_net = 2;
  inline bool has_learned_net() const;
  inline void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  inline const ::std::string& learned_net() const;
  inline void set_learned_net(const ::std::string& value);
  inline void set_learned_net(const char* value);
  inline void set_learned_net(const char* value, size_t size);
  inline ::std::string* mutable_learned_net();
  inline ::std::string* release_learned_net();
  inline void set_allocated_learned_net(::std::string* learned_net);

  // repeated .BlobProto history = 3;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 3;
  inline const ::BlobProto& history(int index) const;
  inline ::BlobProto* mutable_history(int index);
  inline ::BlobProto* add_history();
  inline const ::google::protobuf::RepeatedPtrField< ::BlobProto >&
      history() const;
  inline ::google::protobuf::RepeatedPtrField< ::BlobProto >*
      mutable_history();

  // optional int32 current_step = 4 [default = 0];
  inline bool has_current_step() const;
  inline void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  inline ::google::protobuf::int32 current_step() const;
  inline void set_current_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SolverState)
 private:
  inline void set_has_iter();
  inline void clear_has_iter();
  inline void set_has_learned_net();
  inline void clear_has_learned_net();
  inline void set_has_current_step();
  inline void clear_has_current_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  ::google::protobuf::RepeatedPtrField< ::BlobProto > history_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static SolverState* default_instance_;
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  FillerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN = FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT = FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVG = FillerParameter_VarianceNorm_AVG;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // optional float min = 3 [default = 0];
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline float min() const;
  inline void set_min(float value);

  // optional float max = 4 [default = 1];
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline float max() const;
  inline void set_max(float value);

  // optional float mean = 5 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 5;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 6 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 6;
  inline float std() const;
  inline void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  inline bool has_sparse() const;
  inline void clear_sparse();
  static const int kSparseFieldNumber = 7;
  inline ::google::protobuf::int32 sparse() const;
  inline void set_sparse(::google::protobuf::int32 value);

  // optional .FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  inline bool has_variance_norm() const;
  inline void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  inline ::FillerParameter_VarianceNorm variance_norm() const;
  inline void set_variance_norm(::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:FillerParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_variance_norm();
  inline void clear_has_variance_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::std::string* type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float std_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static FillerParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  NetState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Phase phase = 1 [default = TEST];
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::Phase phase() const;
  inline void set_phase(::Phase value);

  // optional int32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated string stage = 3;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 3;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // @@protoc_insertion_point(class_scope:NetState)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static NetState* default_instance_;
};
// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  void Swap(NetStateRule* other);

  // implements Message ----------------------------------------------

  NetStateRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Phase phase = 1;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::Phase phase() const;
  inline void set_phase(::Phase value);

  // optional int32 min_level = 2;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  inline ::google::protobuf::int32 min_level() const;
  inline void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  inline ::google::protobuf::int32 max_level() const;
  inline void set_max_level(::google::protobuf::int32 value);

  // repeated string stage = 4;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  inline int not_stage_size() const;
  inline void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  inline const ::std::string& not_stage(int index) const;
  inline ::std::string* mutable_not_stage(int index);
  inline void set_not_stage(int index, const ::std::string& value);
  inline void set_not_stage(int index, const char* value);
  inline void set_not_stage(int index, const char* value, size_t size);
  inline ::std::string* add_not_stage();
  inline void add_not_stage(const ::std::string& value);
  inline void add_not_stage(const char* value);
  inline void add_not_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // @@protoc_insertion_point(class_scope:NetStateRule)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  ::google::protobuf::int32 max_level_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static NetStateRule* default_instance_;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  NetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string input = 2;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 2;
  inline const ::std::string& input(int index) const;
  inline ::std::string* mutable_input(int index);
  inline void set_input(int index, const ::std::string& value);
  inline void set_input(int index, const char* value);
  inline void set_input(int index, const char* value, size_t size);
  inline ::std::string* add_input();
  inline void add_input(const ::std::string& value);
  inline void add_input(const char* value);
  inline void add_input(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated .BlobShape input_shape = 8;
  inline int input_shape_size() const;
  inline void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  inline const ::BlobShape& input_shape(int index) const;
  inline ::BlobShape* mutable_input_shape(int index);
  inline ::BlobShape* add_input_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::BlobShape >&
      input_shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::BlobShape >*
      mutable_input_shape();

  // optional bool force_backward = 4 [default = false];
  inline bool has_force_backward() const;
  inline void clear_force_backward();
  static const int kForceBackwardFieldNumber = 4;
  inline bool force_backward() const;
  inline void set_force_backward(bool value);

  // optional .NetState state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline const ::NetState& state() const;
  inline ::NetState* mutable_state();
  inline ::NetState* release_state();
  inline void set_allocated_state(::NetState* state);

  // optional bool debug_info = 6 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 6;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // repeated .LayerParameter layer = 100;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 100;
  inline const ::LayerParameter& layer(int index) const;
  inline ::LayerParameter* mutable_layer(int index);
  inline ::LayerParameter* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::LayerParameter >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::LayerParameter >*
      mutable_layer();

  // @@protoc_insertion_point(class_scope:NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_force_backward();
  inline void clear_has_force_backward();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::BlobShape > input_shape_;
  ::NetState* state_;
  ::google::protobuf::RepeatedPtrField< ::LayerParameter > layer_;
  bool force_backward_;
  bool debug_info_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class BlobShape : public ::google::protobuf::Message {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  BlobShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int64 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int64 value);
  inline void add_dim(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:BlobShape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static BlobShape* default_instance_;
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  BlobProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BlobShape shape = 7;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 7;
  inline const ::BlobShape& shape() const;
  inline ::BlobShape* mutable_shape();
  inline ::BlobShape* release_shape();
  inline void set_allocated_shape(::BlobShape* shape);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  inline int double_data_size() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  inline double double_data(int index) const;
  inline void set_double_data(int index, double value);
  inline void add_double_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  inline int double_diff_size() const;
  inline void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  inline double double_diff(int index) const;
  inline void set_double_diff(int index, double value);
  inline void add_double_diff(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // @@protoc_insertion_point(class_scope:BlobProto)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::BlobShape* shape_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static BlobProto* default_instance_;
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  ParamSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT_MODE = ParamSpec_DimCheckMode_STRICT_MODE;
  static const DimCheckMode PERMISSIVE_MODE = ParamSpec_DimCheckMode_PERMISSIVE_MODE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .ParamSpec.DimCheckMode share_mode = 2;
  inline bool has_share_mode() const;
  inline void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  inline ::ParamSpec_DimCheckMode share_mode() const;
  inline void set_share_mode(::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 1];
  inline bool has_lr_mult() const;
  inline void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  inline float lr_mult() const;
  inline void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  inline bool has_decay_mult() const;
  inline void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  inline float decay_mult() const;
  inline void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:ParamSpec)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_share_mode();
  inline void clear_has_share_mode();
  inline void set_has_lr_mult();
  inline void clear_has_lr_mult();
  inline void set_has_decay_mult();
  inline void clear_has_decay_mult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static ParamSpec* default_instance_;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB = DataParameter_DB_LEVELDB;
  static const DB LMDB = DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional .DataParameter.DB backend = 3 [default = LMDB];
  inline bool has_backend() const;
  inline void clear_backend();
  static const int kBackendFieldNumber = 3;
  inline ::DataParameter_DB backend() const;
  inline void set_backend(::DataParameter_DB value);

  // optional uint32 prefech = 4 [default = 4];
  inline bool has_prefech() const;
  inline void clear_prefech();
  static const int kPrefechFieldNumber = 4;
  inline ::google::protobuf::uint32 prefech() const;
  inline void set_prefech(::google::protobuf::uint32 value);

  // optional bool iteration = 5 [default = true];
  inline bool has_iteration() const;
  inline void clear_iteration();
  static const int kIterationFieldNumber = 5;
  inline bool iteration() const;
  inline void set_iteration(bool value);

  // @@protoc_insertion_point(class_scope:DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_backend();
  inline void clear_has_backend();
  inline void set_has_prefech();
  inline void clear_has_prefech();
  inline void set_has_iteration();
  inline void clear_has_iteration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  int backend_;
  ::google::protobuf::uint32 prefech_;
  bool iteration_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  void Swap(TransformationParameter* other);

  // implements Message ----------------------------------------------

  TransformationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline float scale() const;
  inline void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional uint32 crop_size = 3 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional string mean_file = 4;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 5;
  inline int mean_value_size() const;
  inline void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  inline float mean_value(int index) const;
  inline void set_mean_value(int index, float value);
  inline void add_mean_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional bool force_color = 6 [default = false];
  inline bool has_force_color() const;
  inline void clear_force_color();
  static const int kForceColorFieldNumber = 6;
  inline bool force_color() const;
  inline void set_force_color(bool value);

  // optional bool force_gray = 7 [default = false];
  inline bool has_force_gray() const;
  inline void clear_force_gray();
  static const int kForceGrayFieldNumber = 7;
  inline bool force_gray() const;
  inline void set_force_gray(bool value);

  // @@protoc_insertion_point(class_scope:TransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_force_color();
  inline void clear_has_force_color();
  inline void set_has_force_gray();
  inline void clear_has_force_gray();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float scale_;
  ::google::protobuf::uint32 crop_size_;
  ::std::string* mean_file_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static TransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 3;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 4;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional .Phase phase = 10;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 10;
  inline ::Phase phase() const;
  inline void set_phase(::Phase value);

  // repeated float loss_weight = 5;
  inline int loss_weight_size() const;
  inline void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  inline float loss_weight(int index) const;
  inline void set_loss_weight(int index, float value);
  inline void add_loss_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated bool result_weight = 30;
  inline int result_weight_size() const;
  inline void clear_result_weight();
  static const int kResultWeightFieldNumber = 30;
  inline bool result_weight(int index) const;
  inline void set_result_weight(int index, bool value);
  inline void add_result_weight(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      result_weight() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_result_weight();

  // repeated .ParamSpec param = 6;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 6;
  inline const ::ParamSpec& param(int index) const;
  inline ::ParamSpec* mutable_param(int index);
  inline ::ParamSpec* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::ParamSpec >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::ParamSpec >*
      mutable_param();

  // repeated .BlobProto blobs = 7;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  inline const ::BlobProto& blobs(int index) const;
  inline ::BlobProto* mutable_blobs(int index);
  inline ::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::BlobProto >*
      mutable_blobs();

  // optional .DataParameter data_param = 8;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 8;
  inline const ::DataParameter& data_param() const;
  inline ::DataParameter* mutable_data_param();
  inline ::DataParameter* release_data_param();
  inline void set_allocated_data_param(::DataParameter* data_param);

  // optional .TransformationParameter transform_param = 9;
  inline bool has_transform_param() const;
  inline void clear_transform_param();
  static const int kTransformParamFieldNumber = 9;
  inline const ::TransformationParameter& transform_param() const;
  inline ::TransformationParameter* mutable_transform_param();
  inline ::TransformationParameter* release_transform_param();
  inline void set_allocated_transform_param(::TransformationParameter* transform_param);

  // optional .ReLUParameter relu_param = 19;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 19;
  inline const ::ReLUParameter& relu_param() const;
  inline ::ReLUParameter* mutable_relu_param();
  inline ::ReLUParameter* release_relu_param();
  inline void set_allocated_relu_param(::ReLUParameter* relu_param);

  // optional .ConvolutionParameter convolution_param = 11;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 11;
  inline const ::ConvolutionParameter& convolution_param() const;
  inline ::ConvolutionParameter* mutable_convolution_param();
  inline ::ConvolutionParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::ConvolutionParameter* convolution_param);

  // optional .PoolingParameter pooling_param = 12;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 12;
  inline const ::PoolingParameter& pooling_param() const;
  inline ::PoolingParameter* mutable_pooling_param();
  inline ::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::PoolingParameter* pooling_param);

  // optional .InnerProductParameter inner_product_param = 13;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 13;
  inline const ::InnerProductParameter& inner_product_param() const;
  inline ::InnerProductParameter* mutable_inner_product_param();
  inline ::InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::InnerProductParameter* inner_product_param);

  // optional .LossParameter loss_param = 14;
  inline bool has_loss_param() const;
  inline void clear_loss_param();
  static const int kLossParamFieldNumber = 14;
  inline const ::LossParameter& loss_param() const;
  inline ::LossParameter* mutable_loss_param();
  inline ::LossParameter* release_loss_param();
  inline void set_allocated_loss_param(::LossParameter* loss_param);

  // optional .AccuracyParameter accuracy_param = 15;
  inline bool has_accuracy_param() const;
  inline void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 15;
  inline const ::AccuracyParameter& accuracy_param() const;
  inline ::AccuracyParameter* mutable_accuracy_param();
  inline ::AccuracyParameter* release_accuracy_param();
  inline void set_allocated_accuracy_param(::AccuracyParameter* accuracy_param);

  // optional .BatchNormParameter batch_norm_param = 20;
  inline bool has_batch_norm_param() const;
  inline void clear_batch_norm_param();
  static const int kBatchNormParamFieldNumber = 20;
  inline const ::BatchNormParameter& batch_norm_param() const;
  inline ::BatchNormParameter* mutable_batch_norm_param();
  inline ::BatchNormParameter* release_batch_norm_param();
  inline void set_allocated_batch_norm_param(::BatchNormParameter* batch_norm_param);

  // optional .DropoutParameter dropout_param = 21;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 21;
  inline const ::DropoutParameter& dropout_param() const;
  inline ::DropoutParameter* mutable_dropout_param();
  inline ::DropoutParameter* release_dropout_param();
  inline void set_allocated_dropout_param(::DropoutParameter* dropout_param);

  // optional .LSTMParameter lstm_param = 22;
  inline bool has_lstm_param() const;
  inline void clear_lstm_param();
  static const int kLstmParamFieldNumber = 22;
  inline const ::LSTMParameter& lstm_param() const;
  inline ::LSTMParameter* mutable_lstm_param();
  inline ::LSTMParameter* release_lstm_param();
  inline void set_allocated_lstm_param(::LSTMParameter* lstm_param);

  // optional .PythonParameter python_param = 23;
  inline bool has_python_param() const;
  inline void clear_python_param();
  static const int kPythonParamFieldNumber = 23;
  inline const ::PythonParameter& python_param() const;
  inline ::PythonParameter* mutable_python_param();
  inline ::PythonParameter* release_python_param();
  inline void set_allocated_python_param(::PythonParameter* python_param);

  // optional .ROIPoolingParameter roi_pooling_param = 24;
  inline bool has_roi_pooling_param() const;
  inline void clear_roi_pooling_param();
  static const int kRoiPoolingParamFieldNumber = 24;
  inline const ::ROIPoolingParameter& roi_pooling_param() const;
  inline ::ROIPoolingParameter* mutable_roi_pooling_param();
  inline ::ROIPoolingParameter* release_roi_pooling_param();
  inline void set_allocated_roi_pooling_param(::ROIPoolingParameter* roi_pooling_param);

  // optional .SmoothL1LossParameter smooth_l1_loss_param = 25;
  inline bool has_smooth_l1_loss_param() const;
  inline void clear_smooth_l1_loss_param();
  static const int kSmoothL1LossParamFieldNumber = 25;
  inline const ::SmoothL1LossParameter& smooth_l1_loss_param() const;
  inline ::SmoothL1LossParameter* mutable_smooth_l1_loss_param();
  inline ::SmoothL1LossParameter* release_smooth_l1_loss_param();
  inline void set_allocated_smooth_l1_loss_param(::SmoothL1LossParameter* smooth_l1_loss_param);

  // optional .ReshapeParameter reshape_param = 26;
  inline bool has_reshape_param() const;
  inline void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 26;
  inline const ::ReshapeParameter& reshape_param() const;
  inline ::ReshapeParameter* mutable_reshape_param();
  inline ::ReshapeParameter* release_reshape_param();
  inline void set_allocated_reshape_param(::ReshapeParameter* reshape_param);

  // optional .LRNParameter lrn_param = 27;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 27;
  inline const ::LRNParameter& lrn_param() const;
  inline ::LRNParameter* mutable_lrn_param();
  inline ::LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::LRNParameter* lrn_param);

  // optional .PowerParameter power_param = 28;
  inline bool has_power_param() const;
  inline void clear_power_param();
  static const int kPowerParamFieldNumber = 28;
  inline const ::PowerParameter& power_param() const;
  inline ::PowerParameter* mutable_power_param();
  inline ::PowerParameter* release_power_param();
  inline void set_allocated_power_param(::PowerParameter* power_param);

  // optional .EltwiseParameter eltwise_param = 29;
  inline bool has_eltwise_param() const;
  inline void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 29;
  inline const ::EltwiseParameter& eltwise_param() const;
  inline ::EltwiseParameter* mutable_eltwise_param();
  inline ::EltwiseParameter* release_eltwise_param();
  inline void set_allocated_eltwise_param(::EltwiseParameter* eltwise_param);

  // optional .CropParameter crop_param = 31;
  inline bool has_crop_param() const;
  inline void clear_crop_param();
  static const int kCropParamFieldNumber = 31;
  inline const ::CropParameter& crop_param() const;
  inline ::CropParameter* mutable_crop_param();
  inline ::CropParameter* release_crop_param();
  inline void set_allocated_crop_param(::CropParameter* crop_param);

  // optional .ImageFilesParameter image_files_param = 101;
  inline bool has_image_files_param() const;
  inline void clear_image_files_param();
  static const int kImageFilesParamFieldNumber = 101;
  inline const ::ImageFilesParameter& image_files_param() const;
  inline ::ImageFilesParameter* mutable_image_files_param();
  inline ::ImageFilesParameter* release_image_files_param();
  inline void set_allocated_image_files_param(::ImageFilesParameter* image_files_param);

  // optional .SoftmaxParameter softmax_param = 16;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 16;
  inline const ::SoftmaxParameter& softmax_param() const;
  inline ::SoftmaxParameter* mutable_softmax_param();
  inline ::SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::SoftmaxParameter* softmax_param);

  // repeated .NetStateRule include = 17;
  inline int include_size() const;
  inline void clear_include();
  static const int kIncludeFieldNumber = 17;
  inline const ::NetStateRule& include(int index) const;
  inline ::NetStateRule* mutable_include(int index);
  inline ::NetStateRule* add_include();
  inline const ::google::protobuf::RepeatedPtrField< ::NetStateRule >&
      include() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetStateRule >*
      mutable_include();

  // repeated .NetStateRule exclude = 18;
  inline int exclude_size() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 18;
  inline const ::NetStateRule& exclude(int index) const;
  inline ::NetStateRule* mutable_exclude(int index);
  inline ::NetStateRule* add_exclude();
  inline const ::google::protobuf::RepeatedPtrField< ::NetStateRule >&
      exclude() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetStateRule >*
      mutable_exclude();

  // @@protoc_insertion_point(class_scope:LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_batch_norm_param();
  inline void clear_has_batch_norm_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_lstm_param();
  inline void clear_has_lstm_param();
  inline void set_has_python_param();
  inline void clear_has_python_param();
  inline void set_has_roi_pooling_param();
  inline void clear_has_roi_pooling_param();
  inline void set_has_smooth_l1_loss_param();
  inline void clear_has_smooth_l1_loss_param();
  inline void set_has_reshape_param();
  inline void clear_has_reshape_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_crop_param();
  inline void clear_has_crop_param();
  inline void set_has_image_files_param();
  inline void clear_has_image_files_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedField< bool > result_weight_;
  ::google::protobuf::RepeatedPtrField< ::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::BlobProto > blobs_;
  ::DataParameter* data_param_;
  ::TransformationParameter* transform_param_;
  ::ReLUParameter* relu_param_;
  ::ConvolutionParameter* convolution_param_;
  ::PoolingParameter* pooling_param_;
  ::InnerProductParameter* inner_product_param_;
  ::LossParameter* loss_param_;
  ::AccuracyParameter* accuracy_param_;
  ::BatchNormParameter* batch_norm_param_;
  ::DropoutParameter* dropout_param_;
  ::LSTMParameter* lstm_param_;
  ::PythonParameter* python_param_;
  ::ROIPoolingParameter* roi_pooling_param_;
  ::SmoothL1LossParameter* smooth_l1_loss_param_;
  ::ReshapeParameter* reshape_param_;
  ::LRNParameter* lrn_param_;
  ::PowerParameter* power_param_;
  ::EltwiseParameter* eltwise_param_;
  ::CropParameter* crop_param_;
  ::ImageFilesParameter* image_files_param_;
  ::SoftmaxParameter* softmax_param_;
  ::google::protobuf::RepeatedPtrField< ::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::NetStateRule > exclude_;
  int phase_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  ConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT = ConvolutionParameter_Engine_DEFAULT;
  static const Engine DRAGON = ConvolutionParameter_Engine_DRAGON;
  static const Engine CUDNN = ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // repeated uint32 pad = 3;
  inline int pad_size() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 3;
  inline ::google::protobuf::uint32 pad(int index) const;
  inline void set_pad(int index, ::google::protobuf::uint32 value);
  inline void add_pad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 kernel = 4;
  inline int kernel_size() const;
  inline void clear_kernel();
  static const int kKernelFieldNumber = 4;
  inline ::google::protobuf::uint32 kernel(int index) const;
  inline void set_kernel(int index, ::google::protobuf::uint32 value);
  inline void add_kernel(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel();

  // repeated uint32 stride = 5;
  inline int stride_size() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 5;
  inline ::google::protobuf::uint32 stride(int index) const;
  inline void set_stride(int index, ::google::protobuf::uint32 value);
  inline void add_stride(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // optional uint32 group = 6 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 6;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional .FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::FillerParameter& weight_filler() const;
  inline ::FillerParameter* mutable_weight_filler();
  inline ::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::FillerParameter* weight_filler);

  // optional .FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::FillerParameter& bias_filler() const;
  inline ::FillerParameter* mutable_bias_filler();
  inline ::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::FillerParameter* bias_filler);

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional .ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 15;
  inline ::ConvolutionParameter_Engine engine() const;
  inline void set_engine(::ConvolutionParameter_Engine value);

  // optional int32 axis = 16 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 16;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional bool force_nd_im2col = 17 [default = false];
  inline bool has_force_nd_im2col() const;
  inline void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 17;
  inline bool force_nd_im2col() const;
  inline void set_force_nd_im2col(bool value);

  // @@protoc_insertion_point(class_scope:ConvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_force_nd_im2col();
  inline void clear_has_force_nd_im2col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::FillerParameter* weight_filler_;
  ::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 pad_h_;
  bool bias_term_;
  bool force_nd_im2col_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  PoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_Method Method;
  static const Method MAX = PoolingParameter_Method_MAX;
  static const Method AVG = PoolingParameter_Method_AVG;
  static const Method STOCHASTIC = PoolingParameter_Method_STOCHASTIC;
  static inline bool Method_IsValid(int value) {
    return PoolingParameter_Method_IsValid(value);
  }
  static const Method Method_MIN =
    PoolingParameter_Method_Method_MIN;
  static const Method Method_MAX =
    PoolingParameter_Method_Method_MAX;
  static const int Method_ARRAYSIZE =
    PoolingParameter_Method_Method_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Method_descriptor() {
    return PoolingParameter_Method_descriptor();
  }
  static inline const ::std::string& Method_Name(Method value) {
    return PoolingParameter_Method_Name(value);
  }
  static inline bool Method_Parse(const ::std::string& name,
      Method* value) {
    return PoolingParameter_Method_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT = PoolingParameter_Engine_DEFAULT;
  static const Engine DRAGON = PoolingParameter_Engine_DRAGON;
  static const Engine CUDNN = PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PoolingParameter.Method method = 1 [default = MAX];
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline ::PoolingParameter_Method method() const;
  inline void set_method(::PoolingParameter_Method value);

  // optional uint32 pad = 2 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 2;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernel = 3;
  inline bool has_kernel() const;
  inline void clear_kernel();
  static const int kKernelFieldNumber = 3;
  inline ::google::protobuf::uint32 kernel() const;
  inline void set_kernel(::google::protobuf::uint32 value);

  // optional uint32 stride = 4 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 4;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 5 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 5;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 6 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 6;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 7;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 7;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 8;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 8;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 9;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 9;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 10;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 10;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional .PoolingParameter.Engine engine = 11 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 11;
  inline ::PoolingParameter_Engine engine() const;
  inline void set_engine(::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  inline bool has_global_pooling() const;
  inline void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  inline bool global_pooling() const;
  inline void set_global_pooling(bool value);

  // @@protoc_insertion_point(class_scope:PoolingParameter)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_kernel();
  inline void clear_has_kernel();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_global_pooling();
  inline void clear_has_global_pooling();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int method_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernel_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool global_pooling_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static PoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  void Swap(InnerProductParameter* other);

  // implements Message ----------------------------------------------

  InnerProductParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .FillerParameter weight_filler = 3;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  inline const ::FillerParameter& weight_filler() const;
  inline ::FillerParameter* mutable_weight_filler();
  inline ::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::FillerParameter* weight_filler);

  // optional .FillerParameter bias_filler = 4;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  inline const ::FillerParameter& bias_filler() const;
  inline ::FillerParameter* mutable_bias_filler();
  inline ::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::FillerParameter* bias_filler);

  // optional int32 axis = 5 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 5;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:InnerProductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  ::FillerParameter* weight_filler_;
  ::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static InnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  SoftmaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static const Engine DEFAULT = SoftmaxParameter_Engine_DEFAULT;
  static const Engine DRAGON = SoftmaxParameter_Engine_DRAGON;
  static const Engine CUDNN = SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::SoftmaxParameter_Engine engine() const;
  inline void set_engine(::SoftmaxParameter_Engine value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SoftmaxParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  void Swap(LossParameter* other);

  // implements Message ----------------------------------------------

  LossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // optional bool normalize = 2 [default = true];
  inline bool has_normalize() const;
  inline void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  inline bool normalize() const;
  inline void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:LossParameter)
 private:
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  bool normalize_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static LossParameter* default_instance_;
};
// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  void Swap(AccuracyParameter* other);

  // implements Message ----------------------------------------------

  AccuracyParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 top_k = 1 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 1;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 ignore_label = 3;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AccuracyParameter)
 private:
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 ignore_label_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static AccuracyParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  void Swap(ReLUParameter* other);

  // implements Message ----------------------------------------------

  ReLUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT = ReLUParameter_Engine_DEFAULT;
  static const Engine DRAGON = ReLUParameter_Engine_DRAGON;
  static const Engine CUDNN = ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  inline bool has_negative_slope() const;
  inline void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  inline float negative_slope() const;
  inline void set_negative_slope(float value);

  // optional .ReLUParameter.Engine engine = 2 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 2;
  inline ::ReLUParameter_Engine engine() const;
  inline void set_engine(::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:ReLUParameter)
 private:
  inline void set_has_negative_slope();
  inline void clear_has_negative_slope();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float negative_slope_;
  int engine_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static ReLUParameter* default_instance_;
};
// -------------------------------------------------------------------

class BatchNormParameter : public ::google::protobuf::Message {
 public:
  BatchNormParameter();
  virtual ~BatchNormParameter();

  BatchNormParameter(const BatchNormParameter& from);

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormParameter& default_instance();

  void Swap(BatchNormParameter* other);

  // implements Message ----------------------------------------------

  BatchNormParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchNormParameter& from);
  void MergeFrom(const BatchNormParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_global_stats = 1 [default = true];
  inline bool has_use_global_stats() const;
  inline void clear_use_global_stats();
  static const int kUseGlobalStatsFieldNumber = 1;
  inline bool use_global_stats() const;
  inline void set_use_global_stats(bool value);

  // optional float decay = 3 [default = 0.95];
  inline bool has_decay() const;
  inline void clear_decay();
  static const int kDecayFieldNumber = 3;
  inline float decay() const;
  inline void set_decay(float value);

  // optional float eps = 2 [default = 1e-010];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 2;
  inline float eps() const;
  inline void set_eps(float value);

  // @@protoc_insertion_point(class_scope:BatchNormParameter)
 private:
  inline void set_has_use_global_stats();
  inline void clear_has_use_global_stats();
  inline void set_has_decay();
  inline void clear_has_decay();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool use_global_stats_;
  float decay_;
  float eps_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static BatchNormParameter* default_instance_;
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  void Swap(DropoutParameter* other);

  // implements Message ----------------------------------------------

  DropoutParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 0.5];
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 1;
  inline float prob() const;
  inline void set_prob(float value);

  // @@protoc_insertion_point(class_scope:DropoutParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static DropoutParameter* default_instance_;
};
// -------------------------------------------------------------------

class LSTMParameter : public ::google::protobuf::Message {
 public:
  LSTMParameter();
  virtual ~LSTMParameter();

  LSTMParameter(const LSTMParameter& from);

  inline LSTMParameter& operator=(const LSTMParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LSTMParameter& default_instance();

  void Swap(LSTMParameter* other);

  // implements Message ----------------------------------------------

  LSTMParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LSTMParameter& from);
  void MergeFrom(const LSTMParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional float clipping_threshold = 2 [default = 0];
  inline bool has_clipping_threshold() const;
  inline void clear_clipping_threshold();
  static const int kClippingThresholdFieldNumber = 2;
  inline float clipping_threshold() const;
  inline void set_clipping_threshold(float value);

  // optional .FillerParameter weight_filler = 3;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  inline const ::FillerParameter& weight_filler() const;
  inline ::FillerParameter* mutable_weight_filler();
  inline ::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::FillerParameter* weight_filler);

  // optional .FillerParameter bias_filler = 4;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  inline const ::FillerParameter& bias_filler() const;
  inline ::FillerParameter* mutable_bias_filler();
  inline ::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::FillerParameter* bias_filler);

  // optional uint32 batch_size = 5 [default = 1];
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LSTMParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_clipping_threshold();
  inline void clear_has_clipping_threshold();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  float clipping_threshold_;
  ::FillerParameter* weight_filler_;
  ::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 batch_size_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static LSTMParameter* default_instance_;
};
// -------------------------------------------------------------------

class PythonParameter : public ::google::protobuf::Message {
 public:
  PythonParameter();
  virtual ~PythonParameter();

  PythonParameter(const PythonParameter& from);

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PythonParameter& default_instance();

  void Swap(PythonParameter* other);

  // implements Message ----------------------------------------------

  PythonParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PythonParameter& from);
  void MergeFrom(const PythonParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module = 1;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 1;
  inline const ::std::string& module() const;
  inline void set_module(const ::std::string& value);
  inline void set_module(const char* value);
  inline void set_module(const char* value, size_t size);
  inline ::std::string* mutable_module();
  inline ::std::string* release_module();
  inline void set_allocated_module(::std::string* module);

  // optional string layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // optional string param_str = 3 [default = ""];
  inline bool has_param_str() const;
  inline void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  inline const ::std::string& param_str() const;
  inline void set_param_str(const ::std::string& value);
  inline void set_param_str(const char* value);
  inline void set_param_str(const char* value, size_t size);
  inline ::std::string* mutable_param_str();
  inline ::std::string* release_param_str();
  inline void set_allocated_param_str(::std::string* param_str);

  // optional bool share_in_parallel = 4 [default = false];
  inline bool has_share_in_parallel() const;
  inline void clear_share_in_parallel();
  static const int kShareInParallelFieldNumber = 4;
  inline bool share_in_parallel() const;
  inline void set_share_in_parallel(bool value);

  // @@protoc_insertion_point(class_scope:PythonParameter)
 private:
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_param_str();
  inline void clear_has_param_str();
  inline void set_has_share_in_parallel();
  inline void clear_has_share_in_parallel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* module_;
  ::std::string* layer_;
  ::std::string* param_str_;
  bool share_in_parallel_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static PythonParameter* default_instance_;
};
// -------------------------------------------------------------------

class ROIPoolingParameter : public ::google::protobuf::Message {
 public:
  ROIPoolingParameter();
  virtual ~ROIPoolingParameter();

  ROIPoolingParameter(const ROIPoolingParameter& from);

  inline ROIPoolingParameter& operator=(const ROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIPoolingParameter& default_instance();

  void Swap(ROIPoolingParameter* other);

  // implements Message ----------------------------------------------

  ROIPoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROIPoolingParameter& from);
  void MergeFrom(const ROIPoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pooled_h = 1 [default = 0];
  inline bool has_pooled_h() const;
  inline void clear_pooled_h();
  static const int kPooledHFieldNumber = 1;
  inline ::google::protobuf::uint32 pooled_h() const;
  inline void set_pooled_h(::google::protobuf::uint32 value);

  // optional uint32 pooled_w = 2 [default = 0];
  inline bool has_pooled_w() const;
  inline void clear_pooled_w();
  static const int kPooledWFieldNumber = 2;
  inline ::google::protobuf::uint32 pooled_w() const;
  inline void set_pooled_w(::google::protobuf::uint32 value);

  // optional float spatial_scale = 3 [default = 1];
  inline bool has_spatial_scale() const;
  inline void clear_spatial_scale();
  static const int kSpatialScaleFieldNumber = 3;
  inline float spatial_scale() const;
  inline void set_spatial_scale(float value);

  // @@protoc_insertion_point(class_scope:ROIPoolingParameter)
 private:
  inline void set_has_pooled_h();
  inline void clear_has_pooled_h();
  inline void set_has_pooled_w();
  inline void clear_has_pooled_w();
  inline void set_has_spatial_scale();
  inline void clear_has_spatial_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pooled_h_;
  ::google::protobuf::uint32 pooled_w_;
  float spatial_scale_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static ROIPoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class SmoothL1LossParameter : public ::google::protobuf::Message {
 public:
  SmoothL1LossParameter();
  virtual ~SmoothL1LossParameter();

  SmoothL1LossParameter(const SmoothL1LossParameter& from);

  inline SmoothL1LossParameter& operator=(const SmoothL1LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothL1LossParameter& default_instance();

  void Swap(SmoothL1LossParameter* other);

  // implements Message ----------------------------------------------

  SmoothL1LossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmoothL1LossParameter& from);
  void MergeFrom(const SmoothL1LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float sigma = 1 [default = 1];
  inline bool has_sigma() const;
  inline void clear_sigma();
  static const int kSigmaFieldNumber = 1;
  inline float sigma() const;
  inline void set_sigma(float value);

  // @@protoc_insertion_point(class_scope:SmoothL1LossParameter)
 private:
  inline void set_has_sigma();
  inline void clear_has_sigma();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float sigma_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static SmoothL1LossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReshapeParameter : public ::google::protobuf::Message {
 public:
  ReshapeParameter();
  virtual ~ReshapeParameter();

  ReshapeParameter(const ReshapeParameter& from);

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeParameter& default_instance();

  void Swap(ReshapeParameter* other);

  // implements Message ----------------------------------------------

  ReshapeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReshapeParameter& from);
  void MergeFrom(const ReshapeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BlobShape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::BlobShape& shape() const;
  inline ::BlobShape* mutable_shape();
  inline ::BlobShape* release_shape();
  inline void set_allocated_shape(::BlobShape* shape);

  // optional int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 3 [default = -1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 3;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReshapeParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::BlobShape* shape_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static ReshapeParameter* default_instance_;
};
// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  void Swap(LRNParameter* other);

  // implements Message ----------------------------------------------

  LRNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS = LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL = LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static const Engine DEFAULT = LRNParameter_Engine_DEFAULT;
  static const Engine CAFFE = LRNParameter_Engine_CAFFE;
  static const Engine CUDNN = LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return LRNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 3;
  inline float beta() const;
  inline void set_beta(float value);

  // optional .LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  inline bool has_norm_region() const;
  inline void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  inline ::LRNParameter_NormRegion norm_region() const;
  inline void set_norm_region(::LRNParameter_NormRegion value);

  // optional float k = 5 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 5;
  inline float k() const;
  inline void set_k(float value);

  // optional .LRNParameter.Engine engine = 6 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 6;
  inline ::LRNParameter_Engine engine() const;
  inline void set_engine(::LRNParameter_Engine value);

  // @@protoc_insertion_point(class_scope:LRNParameter)
 private:
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  int norm_region_;
  float k_;
  int engine_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static LRNParameter* default_instance_;
};
// -------------------------------------------------------------------

class PowerParameter : public ::google::protobuf::Message {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerParameter& default_instance();

  void Swap(PowerParameter* other);

  // implements Message ----------------------------------------------

  PowerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float power = 1 [default = 1];
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 1;
  inline float power() const;
  inline void set_power(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:PowerParameter)
 private:
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float power_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static PowerParameter* default_instance_;
};
// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  void Swap(EltwiseParameter* other);

  // implements Message ----------------------------------------------

  EltwiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD = EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM = EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX = EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::EltwiseParameter_EltwiseOp operation() const;
  inline void set_operation(::EltwiseParameter_EltwiseOp value);

  // repeated float coeff = 2;
  inline int coeff_size() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  inline float coeff(int index) const;
  inline void set_coeff(int index, float value);
  inline void add_coeff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool stable_prod_grad = 3 [default = true];
  inline bool has_stable_prod_grad() const;
  inline void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  inline bool stable_prod_grad() const;
  inline void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:EltwiseParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_stable_prod_grad();
  inline void clear_has_stable_prod_grad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static EltwiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageFilesParameter : public ::google::protobuf::Message {
 public:
  ImageFilesParameter();
  virtual ~ImageFilesParameter();

  ImageFilesParameter(const ImageFilesParameter& from);

  inline ImageFilesParameter& operator=(const ImageFilesParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageFilesParameter& default_instance();

  void Swap(ImageFilesParameter* other);

  // implements Message ----------------------------------------------

  ImageFilesParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageFilesParameter& from);
  void MergeFrom(const ImageFilesParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text_file = 1;
  inline bool has_text_file() const;
  inline void clear_text_file();
  static const int kTextFileFieldNumber = 1;
  inline const ::std::string& text_file() const;
  inline void set_text_file(const ::std::string& value);
  inline void set_text_file(const char* value);
  inline void set_text_file(const char* value, size_t size);
  inline ::std::string* mutable_text_file();
  inline ::std::string* release_text_file();
  inline void set_allocated_text_file(::std::string* text_file);

  // repeated string image_files = 2;
  inline int image_files_size() const;
  inline void clear_image_files();
  static const int kImageFilesFieldNumber = 2;
  inline const ::std::string& image_files(int index) const;
  inline ::std::string* mutable_image_files(int index);
  inline void set_image_files(int index, const ::std::string& value);
  inline void set_image_files(int index, const char* value);
  inline void set_image_files(int index, const char* value, size_t size);
  inline ::std::string* add_image_files();
  inline void add_image_files(const ::std::string& value);
  inline void add_image_files(const char* value);
  inline void add_image_files(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& image_files() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image_files();

  // optional .BlobShape input_shape = 3;
  inline bool has_input_shape() const;
  inline void clear_input_shape();
  static const int kInputShapeFieldNumber = 3;
  inline const ::BlobShape& input_shape() const;
  inline ::BlobShape* mutable_input_shape();
  inline ::BlobShape* release_input_shape();
  inline void set_allocated_input_shape(::BlobShape* input_shape);

  // optional bool use_static = 4 [default = true];
  inline bool has_use_static() const;
  inline void clear_use_static();
  static const int kUseStaticFieldNumber = 4;
  inline bool use_static() const;
  inline void set_use_static(bool value);

  // @@protoc_insertion_point(class_scope:ImageFilesParameter)
 private:
  inline void set_has_text_file();
  inline void clear_has_text_file();
  inline void set_has_input_shape();
  inline void clear_has_input_shape();
  inline void set_has_use_static();
  inline void clear_has_use_static();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_file_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_files_;
  ::BlobShape* input_shape_;
  bool use_static_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static ImageFilesParameter* default_instance_;
};
// -------------------------------------------------------------------

class CropParameter : public ::google::protobuf::Message {
 public:
  CropParameter();
  virtual ~CropParameter();

  CropParameter(const CropParameter& from);

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropParameter& default_instance();

  void Swap(CropParameter* other);

  // implements Message ----------------------------------------------

  CropParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CropParameter& from);
  void MergeFrom(const CropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 2];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated uint32 offset = 2;
  inline int offset_size() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 offset(int index) const;
  inline void set_offset(int index, ::google::protobuf::uint32 value);
  inline void add_offset(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:CropParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_dragon_2eproto();
  friend void protobuf_AssignDesc_dragon_2eproto();
  friend void protobuf_ShutdownFile_dragon_2eproto();

  void InitAsDefaultInstance();
  static CropParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:Datum.width)
}

// optional int32 label = 4;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:Datum.label)
}

// optional bytes data = 5;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:Datum.data)
  return *data_;
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Datum.data)
}
inline void Datum::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Datum.data)
  return data_;
}
inline ::std::string* Datum::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Datum.data)
}

// repeated float float_data = 6 [packed = true];
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:Datum.encoded)
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:Datum.encoded)
}

// -------------------------------------------------------------------

// SolverParameter

// optional string net_file = 24;
inline bool SolverParameter::has_net_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_net_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParameter::clear_has_net_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParameter::clear_net_file() {
  if (net_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_file_->clear();
  }
  clear_has_net_file();
}
inline const ::std::string& SolverParameter::net_file() const {
  // @@protoc_insertion_point(field_get:SolverParameter.net_file)
  return *net_file_;
}
inline void SolverParameter::set_net_file(const ::std::string& value) {
  set_has_net_file();
  if (net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_file_ = new ::std::string;
  }
  net_file_->assign(value);
  // @@protoc_insertion_point(field_set:SolverParameter.net_file)
}
inline void SolverParameter::set_net_file(const char* value) {
  set_has_net_file();
  if (net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_file_ = new ::std::string;
  }
  net_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:SolverParameter.net_file)
}
inline void SolverParameter::set_net_file(const char* value, size_t size) {
  set_has_net_file();
  if (net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_file_ = new ::std::string;
  }
  net_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SolverParameter.net_file)
}
inline ::std::string* SolverParameter::mutable_net_file() {
  set_has_net_file();
  if (net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SolverParameter.net_file)
  return net_file_;
}
inline ::std::string* SolverParameter::release_net_file() {
  clear_has_net_file();
  if (net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = net_file_;
    net_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_net_file(::std::string* net_file) {
  if (net_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_file_;
  }
  if (net_file) {
    set_has_net_file();
    net_file_ = net_file;
  } else {
    clear_has_net_file();
    net_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParameter.net_file)
}

// optional .NetParameter net_param = 25;
inline bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::NetParameter::Clear();
  clear_has_net_param();
}
inline const ::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:SolverParameter.net_param)
  return net_param_ != NULL ? *net_param_ : *default_instance_->net_param_;
}
inline ::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) net_param_ = new ::NetParameter;
  // @@protoc_insertion_point(field_mutable:SolverParameter.net_param)
  return net_param_;
}
inline ::NetParameter* SolverParameter::release_net_param() {
  clear_has_net_param();
  ::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_net_param(::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParameter.net_param)
}

// optional string train_net_file = 1;
inline bool SolverParameter::has_train_net_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_train_net_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParameter::clear_has_train_net_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParameter::clear_train_net_file() {
  if (train_net_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_file_->clear();
  }
  clear_has_train_net_file();
}
inline const ::std::string& SolverParameter::train_net_file() const {
  // @@protoc_insertion_point(field_get:SolverParameter.train_net_file)
  return *train_net_file_;
}
inline void SolverParameter::set_train_net_file(const ::std::string& value) {
  set_has_train_net_file();
  if (train_net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_file_ = new ::std::string;
  }
  train_net_file_->assign(value);
  // @@protoc_insertion_point(field_set:SolverParameter.train_net_file)
}
inline void SolverParameter::set_train_net_file(const char* value) {
  set_has_train_net_file();
  if (train_net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_file_ = new ::std::string;
  }
  train_net_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:SolverParameter.train_net_file)
}
inline void SolverParameter::set_train_net_file(const char* value, size_t size) {
  set_has_train_net_file();
  if (train_net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_file_ = new ::std::string;
  }
  train_net_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SolverParameter.train_net_file)
}
inline ::std::string* SolverParameter::mutable_train_net_file() {
  set_has_train_net_file();
  if (train_net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SolverParameter.train_net_file)
  return train_net_file_;
}
inline ::std::string* SolverParameter::release_train_net_file() {
  clear_has_train_net_file();
  if (train_net_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = train_net_file_;
    train_net_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_train_net_file(::std::string* train_net_file) {
  if (train_net_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete train_net_file_;
  }
  if (train_net_file) {
    set_has_train_net_file();
    train_net_file_ = train_net_file;
  } else {
    clear_has_train_net_file();
    train_net_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParameter.train_net_file)
}

// repeated string test_net_file = 2;
inline int SolverParameter::test_net_file_size() const {
  return test_net_file_.size();
}
inline void SolverParameter::clear_test_net_file() {
  test_net_file_.Clear();
}
inline const ::std::string& SolverParameter::test_net_file(int index) const {
  // @@protoc_insertion_point(field_get:SolverParameter.test_net_file)
  return test_net_file_.Get(index);
}
inline ::std::string* SolverParameter::mutable_test_net_file(int index) {
  // @@protoc_insertion_point(field_mutable:SolverParameter.test_net_file)
  return test_net_file_.Mutable(index);
}
inline void SolverParameter::set_test_net_file(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SolverParameter.test_net_file)
  test_net_file_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_test_net_file(int index, const char* value) {
  test_net_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SolverParameter.test_net_file)
}
inline void SolverParameter::set_test_net_file(int index, const char* value, size_t size) {
  test_net_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SolverParameter.test_net_file)
}
inline ::std::string* SolverParameter::add_test_net_file() {
  return test_net_file_.Add();
}
inline void SolverParameter::add_test_net_file(const ::std::string& value) {
  test_net_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SolverParameter.test_net_file)
}
inline void SolverParameter::add_test_net_file(const char* value) {
  test_net_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SolverParameter.test_net_file)
}
inline void SolverParameter::add_test_net_file(const char* value, size_t size) {
  test_net_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SolverParameter.test_net_file)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net_file() const {
  // @@protoc_insertion_point(field_list:SolverParameter.test_net_file)
  return test_net_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net_file() {
  // @@protoc_insertion_point(field_mutable_list:SolverParameter.test_net_file)
  return &test_net_file_;
}

// optional .NetParameter train_net_param = 21;
inline bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::NetParameter::Clear();
  clear_has_train_net_param();
}
inline const ::NetParameter& SolverParameter::train_net_param() const {
  // @@protoc_insertion_point(field_get:SolverParameter.train_net_param)
  return train_net_param_ != NULL ? *train_net_param_ : *default_instance_->train_net_param_;
}
inline ::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) train_net_param_ = new ::NetParameter;
  // @@protoc_insertion_point(field_mutable:SolverParameter.train_net_param)
  return train_net_param_;
}
inline ::NetParameter* SolverParameter::release_train_net_param() {
  clear_has_train_net_param();
  ::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_net_param(::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParameter.train_net_param)
}

// repeated .NetParameter test_net_param = 22;
inline int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
inline void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
inline const ::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
inline ::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
inline ::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:SolverParameter.test_net_param)
  return test_net_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:SolverParameter.test_net_param)
  return test_net_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:SolverParameter.test_net_param)
  return &test_net_param_;
}

// optional .NetState train_state = 26;
inline bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::NetState::Clear();
  clear_has_train_state();
}
inline const ::NetState& SolverParameter::train_state() const {
  // @@protoc_insertion_point(field_get:SolverParameter.train_state)
  return train_state_ != NULL ? *train_state_ : *default_instance_->train_state_;
}
inline ::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) train_state_ = new ::NetState;
  // @@protoc_insertion_point(field_mutable:SolverParameter.train_state)
  return train_state_;
}
inline ::NetState* SolverParameter::release_train_state() {
  clear_has_train_state();
  ::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_state(::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParameter.train_state)
}

// repeated .NetState test_state = 27;
inline int SolverParameter::test_state_size() const {
  return test_state_.size();
}
inline void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
inline const ::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:SolverParameter.test_state)
  return test_state_.Get(index);
}
inline ::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:SolverParameter.test_state)
  return test_state_.Mutable(index);
}
inline ::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:SolverParameter.test_state)
  return test_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:SolverParameter.test_state)
  return test_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:SolverParameter.test_state)
  return &test_state_;
}

// repeated int32 test_iter = 3;
inline int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:SolverParameter.test_iter)
  return test_iter_.Get(index);
}
inline void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:SolverParameter.test_iter)
}
inline void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:SolverParameter.test_iter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:SolverParameter.test_iter)
  return test_iter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
inline ::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:SolverParameter.test_interval)
  return test_interval_;
}
inline void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.test_compute_loss)
}

// optional bool test_before_train = 32 [default = true];
inline bool SolverParameter::has_test_before_train() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_test_before_train() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverParameter::clear_has_test_before_train() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverParameter::clear_test_before_train() {
  test_before_train_ = true;
  clear_has_test_before_train();
}
inline bool SolverParameter::test_before_train() const {
  // @@protoc_insertion_point(field_get:SolverParameter.test_before_train)
  return test_before_train_;
}
inline void SolverParameter::set_test_before_train(bool value) {
  set_has_test_before_train();
  test_before_train_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.test_before_train)
}

// optional float base_lr = 5;
inline bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:SolverParameter.base_lr)
  return base_lr_;
}
inline void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.base_lr)
}

// optional int32 display = 6;
inline bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:SolverParameter.display)
  return display_;
}
inline void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::has_average_loss() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_average_loss() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverParameter::clear_has_average_loss() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
inline ::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:SolverParameter.average_loss)
  return average_loss_;
}
inline void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
inline bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:SolverParameter.max_iter)
  return max_iter_;
}
inline void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
inline bool SolverParameter::has_iter_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverParameter::set_has_iter_size() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverParameter::clear_has_iter_size() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
inline ::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:SolverParameter.iter_size)
  return iter_size_;
}
inline void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.iter_size)
}

// optional string lr_policy = 8;
inline bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverParameter::clear_lr_policy() {
  if (lr_policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_->clear();
  }
  clear_has_lr_policy();
}
inline const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:SolverParameter.lr_policy)
  return *lr_policy_;
}
inline void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_ = new ::std::string;
  }
  lr_policy_->assign(value);
  // @@protoc_insertion_point(field_set:SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value) {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_ = new ::std::string;
  }
  lr_policy_->assign(value);
  // @@protoc_insertion_point(field_set_char:SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_ = new ::std::string;
  }
  lr_policy_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SolverParameter.lr_policy)
}
inline ::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SolverParameter.lr_policy)
  return lr_policy_;
}
inline ::std::string* SolverParameter::release_lr_policy() {
  clear_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lr_policy_;
    lr_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lr_policy_;
  }
  if (lr_policy) {
    set_has_lr_policy();
    lr_policy_ = lr_policy;
  } else {
    clear_has_lr_policy();
    lr_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:SolverParameter.gamma)
  return gamma_;
}
inline void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.gamma)
}

// optional float power = 10;
inline bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:SolverParameter.power)
  return power_;
}
inline void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.power)
}

// optional float momentum = 11;
inline bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:SolverParameter.momentum)
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.momentum)
}

// optional float weight_decay = 12;
inline bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:SolverParameter.weight_decay)
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.weight_decay)
}

// optional string regularizer = 29 [default = "L2"];
inline bool SolverParameter::has_regularizer() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SolverParameter::set_has_regularizer() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SolverParameter::clear_has_regularizer() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SolverParameter::clear_regularizer() {
  if (regularizer_ != _default_regularizer_) {
    regularizer_->assign(*_default_regularizer_);
  }
  clear_has_regularizer();
}
inline const ::std::string& SolverParameter::regularizer() const {
  // @@protoc_insertion_point(field_get:SolverParameter.regularizer)
  return *regularizer_;
}
inline void SolverParameter::set_regularizer(const ::std::string& value) {
  set_has_regularizer();
  if (regularizer_ == _default_regularizer_) {
    regularizer_ = new ::std::string;
  }
  regularizer_->assign(value);
  // @@protoc_insertion_point(field_set:SolverParameter.regularizer)
}
inline void SolverParameter::set_regularizer(const char* value) {
  set_has_regularizer();
  if (regularizer_ == _default_regularizer_) {
    regularizer_ = new ::std::string;
  }
  regularizer_->assign(value);
  // @@protoc_insertion_point(field_set_char:SolverParameter.regularizer)
}
inline void SolverParameter::set_regularizer(const char* value, size_t size) {
  set_has_regularizer();
  if (regularizer_ == _default_regularizer_) {
    regularizer_ = new ::std::string;
  }
  regularizer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SolverParameter.regularizer)
}
inline ::std::string* SolverParameter::mutable_regularizer() {
  set_has_regularizer();
  if (regularizer_ == _default_regularizer_) {
    regularizer_ = new ::std::string(*_default_regularizer_);
  }
  // @@protoc_insertion_point(field_mutable:SolverParameter.regularizer)
  return regularizer_;
}
inline ::std::string* SolverParameter::release_regularizer() {
  clear_has_regularizer();
  if (regularizer_ == _default_regularizer_) {
    return NULL;
  } else {
    ::std::string* temp = regularizer_;
    regularizer_ = const_cast< ::std::string*>(_default_regularizer_);
    return temp;
  }
}
inline void SolverParameter::set_allocated_regularizer(::std::string* regularizer) {
  if (regularizer_ != _default_regularizer_) {
    delete regularizer_;
  }
  if (regularizer) {
    set_has_regularizer();
    regularizer_ = regularizer;
  } else {
    clear_has_regularizer();
    regularizer_ = const_cast< ::std::string*>(_default_regularizer_);
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParameter.regularizer)
}

// optional int32 step_size = 13;
inline bool SolverParameter::has_step_size() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SolverParameter::set_has_step_size() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SolverParameter::clear_has_step_size() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SolverParameter::clear_step_size() {
  step_size_ = 0;
  clear_has_step_size();
}
inline ::google::protobuf::int32 SolverParameter::step_size() const {
  // @@protoc_insertion_point(field_get:SolverParameter.step_size)
  return step_size_;
}
inline void SolverParameter::set_step_size(::google::protobuf::int32 value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.step_size)
}

// repeated int32 step_value = 34;
inline int SolverParameter::step_value_size() const {
  return step_value_.size();
}
inline void SolverParameter::clear_step_value() {
  step_value_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::step_value(int index) const {
  // @@protoc_insertion_point(field_get:SolverParameter.step_value)
  return step_value_.Get(index);
}
inline void SolverParameter::set_step_value(int index, ::google::protobuf::int32 value) {
  step_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:SolverParameter.step_value)
}
inline void SolverParameter::add_step_value(::google::protobuf::int32 value) {
  step_value_.Add(value);
  // @@protoc_insertion_point(field_add:SolverParameter.step_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::step_value() const {
  // @@protoc_insertion_point(field_list:SolverParameter.step_value)
  return step_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_step_value() {
  // @@protoc_insertion_point(field_mutable_list:SolverParameter.step_value)
  return &step_value_;
}

// optional float clip_gradients = 35 [default = -1];
inline bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SolverParameter::set_has_clip_gradients() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
inline float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:SolverParameter.clip_gradients)
  return clip_gradients_;
}
inline void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.clip_gradients)
}

// optional int32 snapshot_interval = 14 [default = 0];
inline bool SolverParameter::has_snapshot_interval() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_interval() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SolverParameter::clear_has_snapshot_interval() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SolverParameter::clear_snapshot_interval() {
  snapshot_interval_ = 0;
  clear_has_snapshot_interval();
}
inline ::google::protobuf::int32 SolverParameter::snapshot_interval() const {
  // @@protoc_insertion_point(field_get:SolverParameter.snapshot_interval)
  return snapshot_interval_;
}
inline void SolverParameter::set_snapshot_interval(::google::protobuf::int32 value) {
  set_has_snapshot_interval();
  snapshot_interval_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.snapshot_interval)
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
inline bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.snapshot_after_train)
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SolverParameter::clear_snapshot_prefix() {
  if (snapshot_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_->clear();
  }
  clear_has_snapshot_prefix();
}
inline const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:SolverParameter.snapshot_prefix)
  return *snapshot_prefix_;
}
inline void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_ = new ::std::string;
  }
  snapshot_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_ = new ::std::string;
  }
  snapshot_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_ = new ::std::string;
  }
  snapshot_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SolverParameter.snapshot_prefix)
}
inline ::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SolverParameter.snapshot_prefix)
  return snapshot_prefix_;
}
inline ::std::string* SolverParameter::release_snapshot_prefix() {
  clear_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = snapshot_prefix_;
    snapshot_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete snapshot_prefix_;
  }
  if (snapshot_prefix) {
    set_has_snapshot_prefix();
    snapshot_prefix_ = snapshot_prefix;
  } else {
    clear_has_snapshot_prefix();
    snapshot_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16;
inline bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.snapshot_diff)
}

// optional .SolverParameter.SnapShotFormat snapshot_format = 37 [default = BINARY];
inline bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_format() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
inline ::SolverParameter_SnapShotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:SolverParameter.snapshot_format)
  return static_cast< ::SolverParameter_SnapShotFormat >(snapshot_format_);
}
inline void SolverParameter::set_snapshot_format(::SolverParameter_SnapShotFormat value) {
  assert(::SolverParameter_SnapShotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.snapshot_format)
}

// optional .SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SolverParameter::set_has_solver_mode() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SolverParameter::clear_has_solver_mode() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
inline ::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:SolverParameter.solver_mode)
  return static_cast< ::SolverParameter_SolverMode >(solver_mode_);
}
inline void SolverParameter::set_solver_mode(::SolverParameter_SolverMode value) {
  assert(::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::has_device_id() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_device_id() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SolverParameter::clear_has_device_id() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:SolverParameter.device_id)
  return device_id_;
}
inline void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::has_random_seed() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_random_seed() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SolverParameter::clear_has_random_seed() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:SolverParameter.random_seed)
  return random_seed_;
}
inline void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
inline bool SolverParameter::has_type() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_type() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SolverParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SolverParameter::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:SolverParameter.type)
  return *type_;
}
inline void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SolverParameter.type)
}
inline ::std::string* SolverParameter::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  // @@protoc_insertion_point(field_mutable:SolverParameter.type)
  return type_;
}
inline ::std::string* SolverParameter::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void SolverParameter::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParameter.type)
}

// optional float delta = 31 [default = 1e-010];
inline bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SolverParameter::clear_delta() {
  delta_ = 1e-010f;
  clear_has_delta();
}
inline float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:SolverParameter.delta)
  return delta_;
}
inline void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
inline bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
inline float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:SolverParameter.momentum2)
  return momentum2_;
}
inline void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.momentum2)
}

// optional float rms_decay = 38;
inline bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_rms_decay() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SolverParameter::clear_has_rms_decay() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0;
  clear_has_rms_decay();
}
inline float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:SolverParameter.rms_decay)
  return rms_decay_;
}
inline void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::has_debug_info() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_debug_info() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SolverParameter::clear_has_debug_info() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:SolverParameter.debug_info)
  return debug_info_;
}
inline void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.debug_info)
}

// optional .SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::has_solver_type() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SolverParameter::set_has_solver_type() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SolverParameter::clear_has_solver_type() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
inline ::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:SolverParameter.solver_type)
  return static_cast< ::SolverParameter_SolverType >(solver_type_);
}
inline void SolverParameter::set_solver_type(::SolverParameter_SolverType value) {
  assert(::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:SolverParameter.solver_type)
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
inline ::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:SolverState.iter)
  return iter_;
}
inline void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_learned_net() {
  if (learned_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_->clear();
  }
  clear_has_learned_net();
}
inline const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:SolverState.learned_net)
  return *learned_net_;
}
inline void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_ = new ::std::string;
  }
  learned_net_->assign(value);
  // @@protoc_insertion_point(field_set:SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_ = new ::std::string;
  }
  learned_net_->assign(value);
  // @@protoc_insertion_point(field_set_char:SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_ = new ::std::string;
  }
  learned_net_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SolverState.learned_net)
}
inline ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SolverState.learned_net)
  return learned_net_;
}
inline ::std::string* SolverState::release_learned_net() {
  clear_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = learned_net_;
    learned_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete learned_net_;
  }
  if (learned_net) {
    set_has_learned_net();
    learned_net_ = learned_net;
  } else {
    clear_has_learned_net();
    learned_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SolverState.learned_net)
}

// repeated .BlobProto history = 3;
inline int SolverState::history_size() const {
  return history_.size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline const ::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:SolverState.history)
  return history_.Get(index);
}
inline ::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:SolverState.history)
  return history_.Mutable(index);
}
inline ::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:SolverState.history)
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:SolverState.history)
  return history_;
}
inline ::google::protobuf::RepeatedPtrField< ::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:SolverState.history)
  return &history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
inline ::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:SolverState.current_step)
  return current_step_;
}
inline void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:SolverState.current_step)
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:FillerParameter.type)
  return *type_;
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  // @@protoc_insertion_point(field_mutable:FillerParameter.type)
  return type_;
}
inline ::std::string* FillerParameter::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:FillerParameter.sparse)
}

// optional .FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:FillerParameter.variance_norm)
  return static_cast< ::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::FillerParameter_VarianceNorm value) {
  assert(::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:FillerParameter.variance_norm)
}

// -------------------------------------------------------------------

// NetState

// optional .Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:NetState.phase)
  return static_cast< ::Phase >(phase_);
}
inline void NetState::set_phase(::Phase value) {
  assert(::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NetState.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:NetStateRule.phase)
  return static_cast< ::Phase >(phase_);
}
inline void NetStateRule::set_phase(::Phase value) {
  assert(::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:NetStateRule.min_level)
  return min_level_;
}
inline void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:NetStateRule.max_level)
  return max_level_;
}
inline void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::stage_size() const {
  return stage_.size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:NetStateRule.stage)
  return stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:NetStateRule.stage)
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetStateRule.stage)
}
inline ::std::string* NetStateRule::add_stage() {
  return stage_.Add();
}
inline void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetStateRule.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:NetStateRule.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:NetStateRule.not_stage)
  return not_stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_not_stage(int index, const char* value) {
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetStateRule.not_stage)
}
inline ::std::string* NetStateRule::add_not_stage() {
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetStateRule.not_stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:NetStateRule.not_stage)
  return not_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:NetStateRule.not_stage)
  return &not_stage_;
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:NetParameter.name)
  return *name_;
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NetParameter.name)
  return name_;
}
inline ::std::string* NetParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NetParameter.name)
}

// repeated string input = 2;
inline int NetParameter::input_size() const {
  return input_.size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:NetParameter.input)
  return input_.Get(index);
}
inline ::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NetParameter.input)
  input_.Mutable(index)->assign(value);
}
inline void NetParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetParameter.input)
}
inline ::std::string* NetParameter::add_input() {
  return input_.Add();
}
inline void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetParameter.input)
}
inline void NetParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:NetParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:NetParameter.input)
  return &input_;
}

// repeated .BlobShape input_shape = 8;
inline int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:NetParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:NetParameter.input_shape)
  return input_shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:NetParameter.input_shape)
  return input_shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:NetParameter.input_shape)
  return &input_shape_;
}

// optional bool force_backward = 4 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:NetParameter.force_backward)
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:NetParameter.force_backward)
}

// optional .NetState state = 5;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->::NetState::Clear();
  clear_has_state();
}
inline const ::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:NetParameter.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::NetState;
  // @@protoc_insertion_point(field_mutable:NetParameter.state)
  return state_;
}
inline ::NetState* NetParameter::release_state() {
  clear_has_state();
  ::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void NetParameter::set_allocated_state(::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:NetParameter.state)
}

// optional bool debug_info = 6 [default = false];
inline bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:NetParameter.debug_info)
  return debug_info_;
}
inline void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:NetParameter.debug_info)
}

// repeated .LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:NetParameter.layer)
  return layer_.Get(index);
}
inline ::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:NetParameter.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:NetParameter.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:NetParameter.layer)
  return &layer_;
}

// -------------------------------------------------------------------

// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::BlobShape::Clear();
  clear_has_shape();
}
inline const ::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:BlobProto.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::BlobShape;
  // @@protoc_insertion_point(field_mutable:BlobProto.shape)
  return shape_;
}
inline ::BlobShape* BlobProto::release_shape() {
  clear_has_shape();
  ::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_shape(::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:BlobProto.double_diff)
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:BlobProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:BlobProto.double_diff)
  return &double_diff_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSpec::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:ParamSpec.name)
  return *name_;
}
inline void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ParamSpec.name)
}
inline ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ParamSpec.name)
  return name_;
}
inline ::std::string* ParamSpec::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ParamSpec.name)
}

// optional .ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
inline ::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:ParamSpec.share_mode)
  return static_cast< ::ParamSpec_DimCheckMode >(share_mode_);
}
inline void ParamSpec::set_share_mode(::ParamSpec_DimCheckMode value) {
  assert(::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:ParamSpec.lr_mult)
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:ParamSpec.decay_mult)
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:DataParameter.source)
  return *source_;
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:DataParameter.source)
}
inline void DataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataParameter.source)
  return source_;
}
inline ::std::string* DataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:DataParameter.batch_size)
}

// optional .DataParameter.DB backend = 3 [default = LMDB];
inline bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_backend() {
  backend_ = 1;
  clear_has_backend();
}
inline ::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:DataParameter.backend)
  return static_cast< ::DataParameter_DB >(backend_);
}
inline void DataParameter::set_backend(::DataParameter_DB value) {
  assert(::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:DataParameter.backend)
}

// optional uint32 prefech = 4 [default = 4];
inline bool DataParameter::has_prefech() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_prefech() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_prefech() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_prefech() {
  prefech_ = 4u;
  clear_has_prefech();
}
inline ::google::protobuf::uint32 DataParameter::prefech() const {
  // @@protoc_insertion_point(field_get:DataParameter.prefech)
  return prefech_;
}
inline void DataParameter::set_prefech(::google::protobuf::uint32 value) {
  set_has_prefech();
  prefech_ = value;
  // @@protoc_insertion_point(field_set:DataParameter.prefech)
}

// optional bool iteration = 5 [default = true];
inline bool DataParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataParameter::clear_iteration() {
  iteration_ = true;
  clear_has_iteration();
}
inline bool DataParameter::iteration() const {
  // @@protoc_insertion_point(field_get:DataParameter.iteration)
  return iteration_;
}
inline void DataParameter::set_iteration(bool value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:DataParameter.iteration)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:TransformationParameter.scale)
  return scale_;
}
inline void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:TransformationParameter.mirror)
  return mirror_;
}
inline void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:TransformationParameter.crop_size)
  return crop_size_;
}
inline void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:TransformationParameter.crop_size)
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformationParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:TransformationParameter.mean_file)
  return *mean_file_;
}
inline void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TransformationParameter.mean_file)
}
inline ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TransformationParameter.mean_file)
  return mean_file_;
}
inline ::std::string* TransformationParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:TransformationParameter.mean_value)
}
inline void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:TransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:TransformationParameter.force_color)
  return force_color_;
}
inline void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:TransformationParameter.force_gray)
  return force_gray_;
}
inline void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:TransformationParameter.force_gray)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:LayerParameter.name)
  return *name_;
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LayerParameter.name)
  return name_;
}
inline ::std::string* LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:LayerParameter.type)
  return *type_;
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LayerParameter.type)
  return type_;
}
inline ::std::string* LayerParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.top)
  return &top_;
}

// optional .Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:LayerParameter.phase)
  return static_cast< ::Phase >(phase_);
}
inline void LayerParameter::set_phase(::Phase value) {
  assert(::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:LayerParameter.phase)
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated bool result_weight = 30;
inline int LayerParameter::result_weight_size() const {
  return result_weight_.size();
}
inline void LayerParameter::clear_result_weight() {
  result_weight_.Clear();
}
inline bool LayerParameter::result_weight(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.result_weight)
  return result_weight_.Get(index);
}
inline void LayerParameter::set_result_weight(int index, bool value) {
  result_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:LayerParameter.result_weight)
}
inline void LayerParameter::add_result_weight(bool value) {
  result_weight_.Add(value);
  // @@protoc_insertion_point(field_add:LayerParameter.result_weight)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerParameter::result_weight() const {
  // @@protoc_insertion_point(field_list:LayerParameter.result_weight)
  return result_weight_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_result_weight() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.result_weight)
  return &result_weight_;
}

// repeated .ParamSpec param = 6;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.param)
  return param_.Get(index);
}
inline ::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:LayerParameter.param)
  return param_.Mutable(index);
}
inline ::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:LayerParameter.param)
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.param)
  return &param_;
}

// repeated .BlobProto blobs = 7;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:LayerParameter.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:LayerParameter.blobs)
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.blobs)
  return &blobs_;
}

// optional .DataParameter data_param = 8;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::DataParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.data_param)
  return data_param_;
}
inline ::DataParameter* LayerParameter::release_data_param() {
  clear_has_data_param();
  ::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.data_param)
}

// optional .TransformationParameter transform_param = 9;
inline bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) transform_param_ = new ::TransformationParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.transform_param)
  return transform_param_;
}
inline ::TransformationParameter* LayerParameter::release_transform_param() {
  clear_has_transform_param();
  ::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_transform_param(::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.transform_param)
}

// optional .ReLUParameter relu_param = 19;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::ReLUParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.relu_param)
  return relu_param_;
}
inline ::ReLUParameter* LayerParameter::release_relu_param() {
  clear_has_relu_param();
  ::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_relu_param(::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.relu_param)
}

// optional .ConvolutionParameter convolution_param = 11;
inline bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::ConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::ConvolutionParameter* LayerParameter::release_convolution_param() {
  clear_has_convolution_param();
  ::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_convolution_param(::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.convolution_param)
}

// optional .PoolingParameter pooling_param = 12;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::PoolingParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::PoolingParameter* LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.pooling_param)
}

// optional .InnerProductParameter inner_product_param = 13;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::InnerProductParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::InnerProductParameter* LayerParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_inner_product_param(::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.inner_product_param)
}

// optional .LossParameter loss_param = 14;
inline bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
inline ::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) loss_param_ = new ::LossParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.loss_param)
  return loss_param_;
}
inline ::LossParameter* LayerParameter::release_loss_param() {
  clear_has_loss_param();
  ::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_loss_param(::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.loss_param)
}

// optional .AccuracyParameter accuracy_param = 15;
inline bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
inline ::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) accuracy_param_ = new ::AccuracyParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::AccuracyParameter* LayerParameter::release_accuracy_param() {
  clear_has_accuracy_param();
  ::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_accuracy_param(::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.accuracy_param)
}

// optional .BatchNormParameter batch_norm_param = 20;
inline bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
inline const ::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_ : *default_instance_->batch_norm_param_;
}
inline ::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) batch_norm_param_ = new ::BatchNormParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
inline ::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  clear_has_batch_norm_param();
  ::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_batch_norm_param(::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.batch_norm_param)
}

// optional .DropoutParameter dropout_param = 21;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) dropout_param_ = new ::DropoutParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::DropoutParameter* LayerParameter::release_dropout_param() {
  clear_has_dropout_param();
  ::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dropout_param(::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.dropout_param)
}

// optional .LSTMParameter lstm_param = 22;
inline bool LayerParameter::has_lstm_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_lstm_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_lstm_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_lstm_param() {
  if (lstm_param_ != NULL) lstm_param_->::LSTMParameter::Clear();
  clear_has_lstm_param();
}
inline const ::LSTMParameter& LayerParameter::lstm_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.lstm_param)
  return lstm_param_ != NULL ? *lstm_param_ : *default_instance_->lstm_param_;
}
inline ::LSTMParameter* LayerParameter::mutable_lstm_param() {
  set_has_lstm_param();
  if (lstm_param_ == NULL) lstm_param_ = new ::LSTMParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.lstm_param)
  return lstm_param_;
}
inline ::LSTMParameter* LayerParameter::release_lstm_param() {
  clear_has_lstm_param();
  ::LSTMParameter* temp = lstm_param_;
  lstm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lstm_param(::LSTMParameter* lstm_param) {
  delete lstm_param_;
  lstm_param_ = lstm_param;
  if (lstm_param) {
    set_has_lstm_param();
  } else {
    clear_has_lstm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.lstm_param)
}

// optional .PythonParameter python_param = 23;
inline bool LayerParameter::has_python_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_python_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_python_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::PythonParameter::Clear();
  clear_has_python_param();
}
inline const ::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.python_param)
  return python_param_ != NULL ? *python_param_ : *default_instance_->python_param_;
}
inline ::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) python_param_ = new ::PythonParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.python_param)
  return python_param_;
}
inline ::PythonParameter* LayerParameter::release_python_param() {
  clear_has_python_param();
  ::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_python_param(::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.python_param)
}

// optional .ROIPoolingParameter roi_pooling_param = 24;
inline bool LayerParameter::has_roi_pooling_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_roi_pooling_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_roi_pooling_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != NULL) roi_pooling_param_->::ROIPoolingParameter::Clear();
  clear_has_roi_pooling_param();
}
inline const ::ROIPoolingParameter& LayerParameter::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.roi_pooling_param)
  return roi_pooling_param_ != NULL ? *roi_pooling_param_ : *default_instance_->roi_pooling_param_;
}
inline ::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() {
  set_has_roi_pooling_param();
  if (roi_pooling_param_ == NULL) roi_pooling_param_ = new ::ROIPoolingParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.roi_pooling_param)
  return roi_pooling_param_;
}
inline ::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  clear_has_roi_pooling_param();
  ::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_pooling_param(::ROIPoolingParameter* roi_pooling_param) {
  delete roi_pooling_param_;
  roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    set_has_roi_pooling_param();
  } else {
    clear_has_roi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.roi_pooling_param)
}

// optional .SmoothL1LossParameter smooth_l1_loss_param = 25;
inline bool LayerParameter::has_smooth_l1_loss_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_smooth_l1_loss_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_smooth_l1_loss_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_smooth_l1_loss_param() {
  if (smooth_l1_loss_param_ != NULL) smooth_l1_loss_param_->::SmoothL1LossParameter::Clear();
  clear_has_smooth_l1_loss_param();
}
inline const ::SmoothL1LossParameter& LayerParameter::smooth_l1_loss_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.smooth_l1_loss_param)
  return smooth_l1_loss_param_ != NULL ? *smooth_l1_loss_param_ : *default_instance_->smooth_l1_loss_param_;
}
inline ::SmoothL1LossParameter* LayerParameter::mutable_smooth_l1_loss_param() {
  set_has_smooth_l1_loss_param();
  if (smooth_l1_loss_param_ == NULL) smooth_l1_loss_param_ = new ::SmoothL1LossParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.smooth_l1_loss_param)
  return smooth_l1_loss_param_;
}
inline ::SmoothL1LossParameter* LayerParameter::release_smooth_l1_loss_param() {
  clear_has_smooth_l1_loss_param();
  ::SmoothL1LossParameter* temp = smooth_l1_loss_param_;
  smooth_l1_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smooth_l1_loss_param(::SmoothL1LossParameter* smooth_l1_loss_param) {
  delete smooth_l1_loss_param_;
  smooth_l1_loss_param_ = smooth_l1_loss_param;
  if (smooth_l1_loss_param) {
    set_has_smooth_l1_loss_param();
  } else {
    clear_has_smooth_l1_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.smooth_l1_loss_param)
}

// optional .ReshapeParameter reshape_param = 26;
inline bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_reshape_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_reshape_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
inline const ::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_ : *default_instance_->reshape_param_;
}
inline ::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) reshape_param_ = new ::ReshapeParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.reshape_param)
  return reshape_param_;
}
inline ::ReshapeParameter* LayerParameter::release_reshape_param() {
  clear_has_reshape_param();
  ::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reshape_param(::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.reshape_param)
}

// optional .LRNParameter lrn_param = 27;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::LRNParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::LRNParameter* LayerParameter::release_lrn_param() {
  clear_has_lrn_param();
  ::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lrn_param(::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.lrn_param)
}

// optional .PowerParameter power_param = 28;
inline bool LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) power_param_ = new ::PowerParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.power_param)
  return power_param_;
}
inline ::PowerParameter* LayerParameter::release_power_param() {
  clear_has_power_param();
  ::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_power_param(::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.power_param)
}

// optional .EltwiseParameter eltwise_param = 29;
inline bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) eltwise_param_ = new ::EltwiseParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::EltwiseParameter* LayerParameter::release_eltwise_param() {
  clear_has_eltwise_param();
  ::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_eltwise_param(::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.eltwise_param)
}

// optional .CropParameter crop_param = 31;
inline bool LayerParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::CropParameter::Clear();
  clear_has_crop_param();
}
inline const ::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_ : *default_instance_->crop_param_;
}
inline ::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) crop_param_ = new ::CropParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.crop_param)
  return crop_param_;
}
inline ::CropParameter* LayerParameter::release_crop_param() {
  clear_has_crop_param();
  ::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_crop_param(::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.crop_param)
}

// optional .ImageFilesParameter image_files_param = 101;
inline bool LayerParameter::has_image_files_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_image_files_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_image_files_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_image_files_param() {
  if (image_files_param_ != NULL) image_files_param_->::ImageFilesParameter::Clear();
  clear_has_image_files_param();
}
inline const ::ImageFilesParameter& LayerParameter::image_files_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.image_files_param)
  return image_files_param_ != NULL ? *image_files_param_ : *default_instance_->image_files_param_;
}
inline ::ImageFilesParameter* LayerParameter::mutable_image_files_param() {
  set_has_image_files_param();
  if (image_files_param_ == NULL) image_files_param_ = new ::ImageFilesParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.image_files_param)
  return image_files_param_;
}
inline ::ImageFilesParameter* LayerParameter::release_image_files_param() {
  clear_has_image_files_param();
  ::ImageFilesParameter* temp = image_files_param_;
  image_files_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_files_param(::ImageFilesParameter* image_files_param) {
  delete image_files_param_;
  image_files_param_ = image_files_param;
  if (image_files_param) {
    set_has_image_files_param();
  } else {
    clear_has_image_files_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.image_files_param)
}

// optional .SoftmaxParameter softmax_param = 16;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) softmax_param_ = new ::SoftmaxParameter;
  // @@protoc_insertion_point(field_mutable:LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::SoftmaxParameter* LayerParameter::release_softmax_param() {
  clear_has_softmax_param();
  ::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:LayerParameter.softmax_param)
}

// repeated .NetStateRule include = 17;
inline int LayerParameter::include_size() const {
  return include_.size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.include)
  return include_.Get(index);
}
inline ::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:LayerParameter.include)
  return include_.Mutable(index);
}
inline ::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:LayerParameter.include)
  return include_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:LayerParameter.include)
  return include_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.include)
  return &include_;
}

// repeated .NetStateRule exclude = 18;
inline int LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:LayerParameter.exclude)
  return exclude_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:LayerParameter.exclude)
  return exclude_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:LayerParameter.exclude)
  return &exclude_;
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.bias_term)
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConvolutionParameter.pad)
}
inline void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:ConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:ConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel = 4;
inline int ConvolutionParameter::kernel_size() const {
  return kernel_.size();
}
inline void ConvolutionParameter::clear_kernel() {
  kernel_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel(int index) const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.kernel)
  return kernel_.Get(index);
}
inline void ConvolutionParameter::set_kernel(int index, ::google::protobuf::uint32 value) {
  kernel_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConvolutionParameter.kernel)
}
inline void ConvolutionParameter::add_kernel(::google::protobuf::uint32 value) {
  kernel_.Add(value);
  // @@protoc_insertion_point(field_add:ConvolutionParameter.kernel)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel() const {
  // @@protoc_insertion_point(field_list:ConvolutionParameter.kernel)
  return kernel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel() {
  // @@protoc_insertion_point(field_mutable_list:ConvolutionParameter.kernel)
  return &kernel_;
}

// repeated uint32 stride = 5;
inline int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConvolutionParameter.stride)
}
inline void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:ConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:ConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:ConvolutionParameter.stride)
  return &stride_;
}

// optional uint32 group = 6 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.group)
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.group)
}

// optional .FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::FillerParameter;
  // @@protoc_insertion_point(field_mutable:ConvolutionParameter.weight_filler)
  return weight_filler_;
}
inline ::FillerParameter* ConvolutionParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:ConvolutionParameter.weight_filler)
}

// optional .FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::FillerParameter;
  // @@protoc_insertion_point(field_mutable:ConvolutionParameter.bias_filler)
  return bias_filler_;
}
inline ::FillerParameter* ConvolutionParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:ConvolutionParameter.bias_filler)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.stride_h)
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.stride_w)
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.stride_w)
}

// optional .ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.engine)
  return static_cast< ::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::ConvolutionParameter_Engine value) {
  assert(::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.axis)
  return axis_;
}
inline void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:ConvolutionParameter.force_nd_im2col)
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .PoolingParameter.Method method = 1 [default = MAX];
inline bool PoolingParameter::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::PoolingParameter_Method PoolingParameter::method() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.method)
  return static_cast< ::PoolingParameter_Method >(method_);
}
inline void PoolingParameter::set_method(::PoolingParameter_Method value) {
  assert(::PoolingParameter_Method_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.method)
}

// optional uint32 pad = 2 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.pad)
}

// optional uint32 kernel = 3;
inline bool PoolingParameter::has_kernel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_kernel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_kernel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_kernel() {
  kernel_ = 0u;
  clear_has_kernel();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.kernel)
  return kernel_;
}
inline void PoolingParameter::set_kernel(::google::protobuf::uint32 value) {
  set_has_kernel();
  kernel_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.kernel)
}

// optional uint32 stride = 4 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.stride)
}

// optional uint32 pad_h = 5 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.pad_h)
}

// optional uint32 pad_w = 6 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.pad_w)
}

// optional uint32 kernel_h = 7;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 8;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.kernel_w)
}

// optional uint32 stride_h = 9;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.stride_h)
}

// optional uint32 stride_w = 10;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.stride_w)
}

// optional .PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.engine)
  return static_cast< ::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::PoolingParameter_Engine value) {
  assert(::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:PoolingParameter.global_pooling)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:InnerProductParameter.num_output)
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:InnerProductParameter.bias_term)
  return bias_term_;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:InnerProductParameter.bias_term)
}

// optional .FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::FillerParameter;
  // @@protoc_insertion_point(field_mutable:InnerProductParameter.weight_filler)
  return weight_filler_;
}
inline ::FillerParameter* InnerProductParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_weight_filler(::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:InnerProductParameter.weight_filler)
}

// optional .FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:InnerProductParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::FillerParameter;
  // @@protoc_insertion_point(field_mutable:InnerProductParameter.bias_filler)
  return bias_filler_;
}
inline ::FillerParameter* InnerProductParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_bias_filler(::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:InnerProductParameter.axis)
  return axis_;
}
inline void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:InnerProductParameter.axis)
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:SoftmaxParameter.engine)
  return static_cast< ::SoftmaxParameter_Engine >(engine_);
}
inline void SoftmaxParameter::set_engine(::SoftmaxParameter_Engine value) {
  assert(::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:SoftmaxParameter.axis)
  return axis_;
}
inline void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:SoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:LossParameter.ignore_label)
  return ignore_label_;
}
inline void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:LossParameter.ignore_label)
}

// optional bool normalize = 2 [default = true];
inline bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossParameter::clear_normalize() {
  normalize_ = true;
  clear_has_normalize();
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:LossParameter.normalize)
  return normalize_;
}
inline void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:LossParameter.normalize)
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:AccuracyParameter.top_k)
  return top_k_;
}
inline void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:AccuracyParameter.axis)
  return axis_;
}
inline void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:AccuracyParameter.ignore_label)
  return ignore_label_;
}
inline void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:AccuracyParameter.ignore_label)
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:ReLUParameter.negative_slope)
}

// optional .ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:ReLUParameter.engine)
  return static_cast< ::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::ReLUParameter_Engine value) {
  assert(::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:ReLUParameter.engine)
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1 [default = true];
inline bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = true;
  clear_has_use_global_stats();
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:BatchNormParameter.use_global_stats)
}

// optional float decay = 3 [default = 0.95];
inline bool BatchNormParameter::has_decay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormParameter::set_has_decay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormParameter::clear_has_decay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormParameter::clear_decay() {
  decay_ = 0.95f;
  clear_has_decay();
}
inline float BatchNormParameter::decay() const {
  // @@protoc_insertion_point(field_get:BatchNormParameter.decay)
  return decay_;
}
inline void BatchNormParameter::set_decay(float value) {
  set_has_decay();
  decay_ = value;
  // @@protoc_insertion_point(field_set:BatchNormParameter.decay)
}

// optional float eps = 2 [default = 1e-010];
inline bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormParameter::clear_eps() {
  eps_ = 1e-010f;
  clear_has_eps();
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:BatchNormParameter.eps)
  return eps_;
}
inline void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:BatchNormParameter.eps)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float prob = 1 [default = 0.5];
inline bool DropoutParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_prob() {
  prob_ = 0.5f;
  clear_has_prob();
}
inline float DropoutParameter::prob() const {
  // @@protoc_insertion_point(field_get:DropoutParameter.prob)
  return prob_;
}
inline void DropoutParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:DropoutParameter.prob)
}

// -------------------------------------------------------------------

// LSTMParameter

// optional uint32 num_output = 1;
inline bool LSTMParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LSTMParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LSTMParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LSTMParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 LSTMParameter::num_output() const {
  // @@protoc_insertion_point(field_get:LSTMParameter.num_output)
  return num_output_;
}
inline void LSTMParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:LSTMParameter.num_output)
}

// optional float clipping_threshold = 2 [default = 0];
inline bool LSTMParameter::has_clipping_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LSTMParameter::set_has_clipping_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LSTMParameter::clear_has_clipping_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LSTMParameter::clear_clipping_threshold() {
  clipping_threshold_ = 0;
  clear_has_clipping_threshold();
}
inline float LSTMParameter::clipping_threshold() const {
  // @@protoc_insertion_point(field_get:LSTMParameter.clipping_threshold)
  return clipping_threshold_;
}
inline void LSTMParameter::set_clipping_threshold(float value) {
  set_has_clipping_threshold();
  clipping_threshold_ = value;
  // @@protoc_insertion_point(field_set:LSTMParameter.clipping_threshold)
}

// optional .FillerParameter weight_filler = 3;
inline bool LSTMParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LSTMParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LSTMParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LSTMParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::FillerParameter& LSTMParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:LSTMParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::FillerParameter* LSTMParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::FillerParameter;
  // @@protoc_insertion_point(field_mutable:LSTMParameter.weight_filler)
  return weight_filler_;
}
inline ::FillerParameter* LSTMParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void LSTMParameter::set_allocated_weight_filler(::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:LSTMParameter.weight_filler)
}

// optional .FillerParameter bias_filler = 4;
inline bool LSTMParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LSTMParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LSTMParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LSTMParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::FillerParameter& LSTMParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:LSTMParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::FillerParameter* LSTMParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::FillerParameter;
  // @@protoc_insertion_point(field_mutable:LSTMParameter.bias_filler)
  return bias_filler_;
}
inline ::FillerParameter* LSTMParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void LSTMParameter::set_allocated_bias_filler(::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:LSTMParameter.bias_filler)
}

// optional uint32 batch_size = 5 [default = 1];
inline bool LSTMParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LSTMParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LSTMParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LSTMParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 LSTMParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:LSTMParameter.batch_size)
  return batch_size_;
}
inline void LSTMParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:LSTMParameter.batch_size)
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PythonParameter::clear_module() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_->clear();
  }
  clear_has_module();
}
inline const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:PythonParameter.module)
  return *module_;
}
inline void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(value);
  // @@protoc_insertion_point(field_set:PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(value);
  // @@protoc_insertion_point(field_set_char:PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PythonParameter.module)
}
inline ::std::string* PythonParameter::mutable_module() {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PythonParameter.module)
  return module_;
}
inline ::std::string* PythonParameter::release_module() {
  clear_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = module_;
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PythonParameter::set_allocated_module(::std::string* module) {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (module) {
    set_has_module();
    module_ = module;
  } else {
    clear_has_module();
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PythonParameter::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:PythonParameter.layer)
  return *layer_;
}
inline void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PythonParameter.layer)
}
inline ::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PythonParameter.layer)
  return layer_;
}
inline ::std::string* PythonParameter::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PythonParameter::clear_param_str() {
  if (param_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_->clear();
  }
  clear_has_param_str();
}
inline const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:PythonParameter.param_str)
  return *param_str_;
}
inline void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
  // @@protoc_insertion_point(field_set:PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PythonParameter.param_str)
}
inline ::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PythonParameter.param_str)
  return param_str_;
}
inline ::std::string* PythonParameter::release_param_str() {
  clear_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param_str_;
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_str_;
  }
  if (param_str) {
    set_has_param_str();
    param_str_ = param_str;
  } else {
    clear_has_param_str();
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:PythonParameter.share_in_parallel)
}

// -------------------------------------------------------------------

// ROIPoolingParameter

// optional uint32 pooled_h = 1 [default = 0];
inline bool ROIPoolingParameter::has_pooled_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIPoolingParameter::clear_has_pooled_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIPoolingParameter::clear_pooled_h() {
  pooled_h_ = 0u;
  clear_has_pooled_h();
}
inline ::google::protobuf::uint32 ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:ROIPoolingParameter.pooled_h)
  return pooled_h_;
}
inline void ROIPoolingParameter::set_pooled_h(::google::protobuf::uint32 value) {
  set_has_pooled_h();
  pooled_h_ = value;
  // @@protoc_insertion_point(field_set:ROIPoolingParameter.pooled_h)
}

// optional uint32 pooled_w = 2 [default = 0];
inline bool ROIPoolingParameter::has_pooled_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIPoolingParameter::clear_has_pooled_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIPoolingParameter::clear_pooled_w() {
  pooled_w_ = 0u;
  clear_has_pooled_w();
}
inline ::google::protobuf::uint32 ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:ROIPoolingParameter.pooled_w)
  return pooled_w_;
}
inline void ROIPoolingParameter::set_pooled_w(::google::protobuf::uint32 value) {
  set_has_pooled_w();
  pooled_w_ = value;
  // @@protoc_insertion_point(field_set:ROIPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
inline bool ROIPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  clear_has_spatial_scale();
}
inline float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:ROIPoolingParameter.spatial_scale)
  return spatial_scale_;
}
inline void ROIPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:ROIPoolingParameter.spatial_scale)
}

// -------------------------------------------------------------------

// SmoothL1LossParameter

// optional float sigma = 1 [default = 1];
inline bool SmoothL1LossParameter::has_sigma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmoothL1LossParameter::set_has_sigma() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmoothL1LossParameter::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmoothL1LossParameter::clear_sigma() {
  sigma_ = 1;
  clear_has_sigma();
}
inline float SmoothL1LossParameter::sigma() const {
  // @@protoc_insertion_point(field_get:SmoothL1LossParameter.sigma)
  return sigma_;
}
inline void SmoothL1LossParameter::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:SmoothL1LossParameter.sigma)
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .BlobShape shape = 1;
inline bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::BlobShape::Clear();
  clear_has_shape();
}
inline const ::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:ReshapeParameter.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::BlobShape;
  // @@protoc_insertion_point(field_mutable:ReshapeParameter.shape)
  return shape_;
}
inline ::BlobShape* ReshapeParameter::release_shape() {
  clear_has_shape();
  ::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ReshapeParameter::set_allocated_shape(::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:ReshapeParameter.axis)
  return axis_;
}
inline void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:ReshapeParameter.num_axes)
  return num_axes_;
}
inline void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:ReshapeParameter.num_axes)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:LRNParameter.local_size)
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:LRNParameter.alpha)
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:LRNParameter.beta)
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:LRNParameter.beta)
}

// optional .LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:LRNParameter.norm_region)
  return static_cast< ::LRNParameter_NormRegion >(norm_region_);
}
inline void LRNParameter::set_norm_region(::LRNParameter_NormRegion value) {
  assert(::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:LRNParameter.k)
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:LRNParameter.k)
}

// optional .LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:LRNParameter.engine)
  return static_cast< ::LRNParameter_Engine >(engine_);
}
inline void LRNParameter::set_engine(::LRNParameter_Engine value) {
  assert(::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:LRNParameter.engine)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:PowerParameter.power)
  return power_;
}
inline void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:PowerParameter.scale)
  return scale_;
}
inline void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:PowerParameter.shift)
  return shift_;
}
inline void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:PowerParameter.shift)
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:EltwiseParameter.operation)
  return static_cast< ::EltwiseParameter_EltwiseOp >(operation_);
}
inline void EltwiseParameter::set_operation(::EltwiseParameter_EltwiseOp value) {
  assert(::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:EltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:EltwiseParameter.coeff)
}
inline void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:EltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// ImageFilesParameter

// optional string text_file = 1;
inline bool ImageFilesParameter::has_text_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageFilesParameter::set_has_text_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageFilesParameter::clear_has_text_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageFilesParameter::clear_text_file() {
  if (text_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_file_->clear();
  }
  clear_has_text_file();
}
inline const ::std::string& ImageFilesParameter::text_file() const {
  // @@protoc_insertion_point(field_get:ImageFilesParameter.text_file)
  return *text_file_;
}
inline void ImageFilesParameter::set_text_file(const ::std::string& value) {
  set_has_text_file();
  if (text_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_file_ = new ::std::string;
  }
  text_file_->assign(value);
  // @@protoc_insertion_point(field_set:ImageFilesParameter.text_file)
}
inline void ImageFilesParameter::set_text_file(const char* value) {
  set_has_text_file();
  if (text_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_file_ = new ::std::string;
  }
  text_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:ImageFilesParameter.text_file)
}
inline void ImageFilesParameter::set_text_file(const char* value, size_t size) {
  set_has_text_file();
  if (text_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_file_ = new ::std::string;
  }
  text_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ImageFilesParameter.text_file)
}
inline ::std::string* ImageFilesParameter::mutable_text_file() {
  set_has_text_file();
  if (text_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ImageFilesParameter.text_file)
  return text_file_;
}
inline ::std::string* ImageFilesParameter::release_text_file() {
  clear_has_text_file();
  if (text_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_file_;
    text_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageFilesParameter::set_allocated_text_file(::std::string* text_file) {
  if (text_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_file_;
  }
  if (text_file) {
    set_has_text_file();
    text_file_ = text_file;
  } else {
    clear_has_text_file();
    text_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ImageFilesParameter.text_file)
}

// repeated string image_files = 2;
inline int ImageFilesParameter::image_files_size() const {
  return image_files_.size();
}
inline void ImageFilesParameter::clear_image_files() {
  image_files_.Clear();
}
inline const ::std::string& ImageFilesParameter::image_files(int index) const {
  // @@protoc_insertion_point(field_get:ImageFilesParameter.image_files)
  return image_files_.Get(index);
}
inline ::std::string* ImageFilesParameter::mutable_image_files(int index) {
  // @@protoc_insertion_point(field_mutable:ImageFilesParameter.image_files)
  return image_files_.Mutable(index);
}
inline void ImageFilesParameter::set_image_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ImageFilesParameter.image_files)
  image_files_.Mutable(index)->assign(value);
}
inline void ImageFilesParameter::set_image_files(int index, const char* value) {
  image_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ImageFilesParameter.image_files)
}
inline void ImageFilesParameter::set_image_files(int index, const char* value, size_t size) {
  image_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ImageFilesParameter.image_files)
}
inline ::std::string* ImageFilesParameter::add_image_files() {
  return image_files_.Add();
}
inline void ImageFilesParameter::add_image_files(const ::std::string& value) {
  image_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ImageFilesParameter.image_files)
}
inline void ImageFilesParameter::add_image_files(const char* value) {
  image_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ImageFilesParameter.image_files)
}
inline void ImageFilesParameter::add_image_files(const char* value, size_t size) {
  image_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ImageFilesParameter.image_files)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageFilesParameter::image_files() const {
  // @@protoc_insertion_point(field_list:ImageFilesParameter.image_files)
  return image_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImageFilesParameter::mutable_image_files() {
  // @@protoc_insertion_point(field_mutable_list:ImageFilesParameter.image_files)
  return &image_files_;
}

// optional .BlobShape input_shape = 3;
inline bool ImageFilesParameter::has_input_shape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageFilesParameter::set_has_input_shape() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageFilesParameter::clear_has_input_shape() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageFilesParameter::clear_input_shape() {
  if (input_shape_ != NULL) input_shape_->::BlobShape::Clear();
  clear_has_input_shape();
}
inline const ::BlobShape& ImageFilesParameter::input_shape() const {
  // @@protoc_insertion_point(field_get:ImageFilesParameter.input_shape)
  return input_shape_ != NULL ? *input_shape_ : *default_instance_->input_shape_;
}
inline ::BlobShape* ImageFilesParameter::mutable_input_shape() {
  set_has_input_shape();
  if (input_shape_ == NULL) input_shape_ = new ::BlobShape;
  // @@protoc_insertion_point(field_mutable:ImageFilesParameter.input_shape)
  return input_shape_;
}
inline ::BlobShape* ImageFilesParameter::release_input_shape() {
  clear_has_input_shape();
  ::BlobShape* temp = input_shape_;
  input_shape_ = NULL;
  return temp;
}
inline void ImageFilesParameter::set_allocated_input_shape(::BlobShape* input_shape) {
  delete input_shape_;
  input_shape_ = input_shape;
  if (input_shape) {
    set_has_input_shape();
  } else {
    clear_has_input_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:ImageFilesParameter.input_shape)
}

// optional bool use_static = 4 [default = true];
inline bool ImageFilesParameter::has_use_static() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageFilesParameter::set_has_use_static() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageFilesParameter::clear_has_use_static() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageFilesParameter::clear_use_static() {
  use_static_ = true;
  clear_has_use_static();
}
inline bool ImageFilesParameter::use_static() const {
  // @@protoc_insertion_point(field_get:ImageFilesParameter.use_static)
  return use_static_;
}
inline void ImageFilesParameter::set_use_static(bool value) {
  set_has_use_static();
  use_static_ = value;
  // @@protoc_insertion_point(field_set:ImageFilesParameter.use_static)
}

// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
inline ::google::protobuf::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:CropParameter.axis)
  return axis_;
}
inline void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:CropParameter.axis)
}

// repeated uint32 offset = 2;
inline int CropParameter::offset_size() const {
  return offset_.size();
}
inline void CropParameter::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:CropParameter.offset)
  return offset_.Get(index);
}
inline void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:CropParameter.offset)
}
inline void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:CropParameter.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:CropParameter.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:CropParameter.offset)
  return &offset_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SolverParameter_SnapShotFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SolverParameter_SnapShotFormat>() {
  return ::SolverParameter_SnapShotFormat_descriptor();
}
template <> struct is_proto_enum< ::SolverParameter_SolverMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SolverParameter_SolverMode>() {
  return ::SolverParameter_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::SolverParameter_SolverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SolverParameter_SolverType>() {
  return ::SolverParameter_SolverType_descriptor();
}
template <> struct is_proto_enum< ::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FillerParameter_VarianceNorm>() {
  return ::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::ParamSpec_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ParamSpec_DimCheckMode>() {
  return ::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::DataParameter_DB> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataParameter_DB>() {
  return ::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::ConvolutionParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConvolutionParameter_Engine>() {
  return ::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::PoolingParameter_Method> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PoolingParameter_Method>() {
  return ::PoolingParameter_Method_descriptor();
}
template <> struct is_proto_enum< ::PoolingParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PoolingParameter_Engine>() {
  return ::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::SoftmaxParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SoftmaxParameter_Engine>() {
  return ::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::ReLUParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ReLUParameter_Engine>() {
  return ::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::LRNParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LRNParameter_NormRegion>() {
  return ::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::LRNParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LRNParameter_Engine>() {
  return ::LRNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::EltwiseParameter_EltwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EltwiseParameter_EltwiseOp>() {
  return ::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Phase>() {
  return ::Phase_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dragon_2eproto__INCLUDED
