FILE(GLOB_RECURSE SRC_FILES *.c *.cpp *.cu *.cc)
CUDA_ADD_EXECUTABLE(${PROJECT_NAME} ${SRC_FILES} ${HED_FILES})
CUDA_ADD_LIBRARY(${PROJECT_NAME}SHARED SHARED ${SRC_FILES} ${HED_FILES})
CUDA_ADD_LIBRARY(${PROJECT_NAME}STATIC STATIC ${SRC_FILES} ${HED_FILES})
set(USE_PYTHON on)
CUDA_ADD_LIBRARY(${PROJECT_NAME}PYTHON SHARED ${SRC_FILES} ${HED_FILES})

# ---[ link cuda
TARGET_LINK_LIBRARIES(${PROJECT_NAME}  ${CUDA_LIBRARIES} ${CUDA_cublas_LIBRARY} ${CUDA_curand_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}SHARED  ${CUDA_LIBRARIES} ${CUDA_cublas_LIBRARY} ${CUDA_curand_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}STATIC  ${CUDA_LIBRARIES} ${CUDA_cublas_LIBRARY} ${CUDA_curand_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}PYTHON  ${CUDA_LIBRARIES} ${CUDA_cublas_LIBRARY} ${CUDA_curand_LIBRARY})

# ---[ link others
FILE(GLOB targets ${3RDPARTY_LIBS}/*.lib ${3RDPARTY_LIBS}/*.so)
foreach(target ${targets})
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}  ${target})
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}SHARED  ${target})
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}STATIC  ${target})
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}PYTHON  ${target})
endforeach()

IF(WIN32)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}  shlwapi.lib)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}SHARED  shlwapi.lib)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}STATIC  shlwapi.lib)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}PYTHON  shlwapi.lib)
ENDIF()

set_target_properties(${PROJECT_NAME}PYTHON PROPERTIES OUTPUT_NAME _dragon)

install (TARGETS ${PROJECT_NAME} DESTINATION bin)
install (TARGETS ${PROJECT_NAME}PYTHON DESTINATION lib)

#install (TARGETS ${PROJECT_NAME}SHARED DESTINATION lib)
#install (TARGETS ${PROJECT_NAME}STATIC DESTINATION lib)

